# GitHub Actions CI Pipeline for flutter_keycheck v3.0.0
# Reference: https://github.com/dart-lang/setup-dart
# Reference: https://dart.dev/tools/dart-test#platform-selector-option
name: CI

on:
  push:
    branches: [ main, develop, flutter_keycheck_v3 ]
    tags:
      - 'v*.*.*'
    paths:
      - 'lib/**'
      - 'bin/**'
      - 'test/**'
      - 'example/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lib/**'
      - 'bin/**'
      - 'test/**'
      - 'example/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
      - '.github/workflows/ci.yml'

env:
  # Deterministic cache for CI
  FKC_CACHE_TTL_HOURS: 0
  # Dart SDK version
  DART_SDK: '3.9.0'

jobs:
  # Analyze and format check
  analyze:
    name: Analyze & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-dart-${{ env.DART_SDK }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-${{ env.DART_SDK }}-
            ${{ runner.os }}-dart-

      - name: Install dependencies
        run: dart pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze code
        run: dart analyze --fatal-infos --fatal-warnings

  # Test matrix across platforms
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-dart-${{ env.DART_SDK }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-${{ env.DART_SDK }}-
            ${{ runner.os }}-dart-

      - name: Install dependencies
        run: dart pub get

      - name: Prepare reports directory
        shell: bash
        run: |
          [ -d reports ] || mkdir -p reports
      
      - name: Run tests with JSON reporter
        run: |
          dart test --reporter=json > reports/test_results.json || true
          dart test --reporter=expanded

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: reports/test_results.json

  # Contract testing for exit codes
  contract-test:
    name: Contract Testing
    runs-on: ubuntu-latest
    needs: [analyze]
    
    steps:
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-dart-${{ env.DART_SDK }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-${{ env.DART_SDK }}-
            ${{ runner.os }}-dart-

      - name: Install dependencies
        run: dart pub get

      - name: Build executable
        run: dart compile exe bin/flutter_keycheck.dart -o flutter_keycheck

      - name: Test exit code 2 for missing config
        run: |
          echo "Testing missing config file returns exit code 2..."
          set +e
          ./flutter_keycheck scan --config ./DOES_NOT_EXIST.yaml
          EXIT_CODE=$?
          set -e
          
          if [ $EXIT_CODE -ne 2 ]; then
            echo "ERROR: Expected exit code 2 for missing config, got $EXIT_CODE"
            exit 1
          fi
          echo "✓ Missing config correctly returns exit code 2"

      - name: Test specific exit code scenarios
        run: |
          # Test config_missing_exit_test.dart specifically
          dart test test/v3/config_missing_exit_test.dart --reporter=expanded
          
          # Test package_scope_cli_test.dart specifically  
          dart test test/v3/package_scope_cli_test.dart --reporter=expanded

      - name: Contract CLI verification - workspace scan
        run: |
          echo "Testing workspace-only scan..."
          ./flutter_keycheck scan --scope workspace-only --fail-on-parse-errors
          echo "✓ Workspace scan completed successfully"

      - name: Contract CLI verification - deps scan
        run: |
          echo "Testing deps-only scan..."
          ./flutter_keycheck scan --scope deps-only --fail-on-parse-errors
          echo "✓ Dependencies scan completed successfully"

      - name: Contract CLI verification - all scan
        run: |
          echo "Testing all scope scan..."
          ./flutter_keycheck scan --scope all --fail-on-collision
          echo "✓ Full scan completed successfully"

  # Demo app smoke testing
  demo-app-test:
    name: Demo App Smoke Test
    runs-on: ubuntu-latest
    needs: [analyze]
    
    steps:
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-dart-${{ env.DART_SDK }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-${{ env.DART_SDK }}-
            ${{ runner.os }}-dart-

      - name: Install dependencies
        run: |
          dart pub get
          dart pub global activate --source path .

      - name: Run demo app smoke test
        run: |
          dart test test/v3/demo_app_smoke_test.dart --reporter=expanded
          
      - name: Demo scan from root
        run: |
          echo "Scanning demo app from project root..."
          export PATH="$PATH:$HOME/.pub-cache/bin"
          
          # Build executable for consistent behavior
          dart compile exe bin/flutter_keycheck.dart -o flutter_keycheck
          
          # Run scan on demo app (from demo app directory)
          cd example/demo_app
          dart pub get
          ../../flutter_keycheck scan --scope workspace-only
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "ERROR: Demo app scan failed with exit code $EXIT_CODE"
            exit 1
          fi
          echo "✓ Demo app scan completed successfully"

      - name: Test demo app with specific keys
        run: |
          cd example/demo_app
          dart pub get
          
          # Verify keys are found
          ../../flutter_keycheck scan --scope workspace-only --output json > scan_result.json
          
          # Check that expected keys are found
          if ! grep -q "home_button" scan_result.json; then
            echo "ERROR: Expected key 'home_button' not found in demo app"
            exit 1
          fi
          echo "✓ Demo app keys detected correctly"

  # Publish dry-run on version tags
  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    needs: [test, contract-test, demo-app-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-dart-${{ env.DART_SDK }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-${{ env.DART_SDK }}-
            ${{ runner.os }}-dart-

      - name: Install dependencies
        run: dart pub get

      - name: Verify version matches tag
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          
          if [ "$TAG" != "$VERSION" ]; then
            echo "ERROR: Tag version ($TAG) does not match pubspec.yaml version ($VERSION)"
            exit 1
          fi
          echo "✓ Version $VERSION matches tag"

      - name: Run publish dry-run
        run: dart pub publish --dry-run

      - name: Check package score
        run: |
          dart pub global activate pana
          pana --no-warning --exit-code-threshold 90 .

  # Summary job for branch protection
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [analyze, test, contract-test, demo-app-test]
    if: always()
    
    steps:
      - name: Check CI results
        run: |
          if [ "${{ needs.analyze.result }}" != "success" ]; then
            echo "❌ Analyze job failed"
            exit 1
          fi
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Test job failed"
            exit 1
          fi
          
          if [ "${{ needs.contract-test.result }}" != "success" ]; then
            echo "❌ Contract test job failed"
            exit 1
          fi
          
          if [ "${{ needs.demo-app-test.result }}" != "success" ]; then
            echo "❌ Demo app test failed"
            exit 1
          fi
          
          echo "✅ All CI checks passed successfully!"

