name: Flutter KeyCheck CI

on:
  push:
    branches: [ main, flutter_keycheck_v3 ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DART_SDK: stable
  CACHE_VERSION: v1

jobs:
  validate-keycheck:
    name: Flutter KeyCheck Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      keys-validated: ${{ steps.keycheck.outputs.keys-validated }}
      coverage-score: ${{ steps.keycheck.outputs.coverage-score }}
      critical-keys: ${{ steps.keycheck.outputs.critical-keys }}
      scan-duration: ${{ steps.keycheck.outputs.scan-duration }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}
      
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ env.CACHE_VERSION }}-dart-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dart-${{ runner.os }}-
      
      - name: Install Dependencies
        run: dart pub get
      
      - name: Baseline Validation
        id: keycheck
        run: |
          echo "üîë Running Flutter KeyCheck baseline validation..."
          
          # Run validation against golden workspace
          START_TIME=$(date +%s%3N)
          timeout 30s dart run bin/flutter_keycheck.dart \
            --keys test/golden_workspace/expected_keycheck.json \
            --path test/golden_workspace \
            --verbose \
            --strict > keycheck_output.log 2>&1 || true
          END_TIME=$(date +%s%3N)
          SCAN_DURATION=$((END_TIME - START_TIME))
          
          # Parse results
          TOTAL_KEYS=$(cat keycheck_output.log | grep -o "Total keys found: [0-9]*" | grep -o "[0-9]*" || echo "0")
          CRITICAL_KEYS=$(cat keycheck_output.log | grep -o "Critical keys: [0-9]*" | grep -o "[0-9]*" || echo "0")
          
          # Calculate coverage score (keys found / expected * 100)
          EXPECTED_KEYS=14
          if [ "$TOTAL_KEYS" -gt 0 ]; then
            COVERAGE_SCORE=$(echo "scale=1; $TOTAL_KEYS * 100 / $EXPECTED_KEYS" | bc -l)
          else
            COVERAGE_SCORE="0.0"
          fi
          
          echo "üìä Validation Results:"
          echo "   ‚Ä¢ Keys Found: $TOTAL_KEYS/$EXPECTED_KEYS"
          echo "   ‚Ä¢ Critical Keys: $CRITICAL_KEYS"
          echo "   ‚Ä¢ Coverage Score: ${COVERAGE_SCORE}%"
          echo "   ‚Ä¢ Scan Duration: ${SCAN_DURATION}ms"
          
          # Quality Gates
          echo "üö¶ Quality Gates:"
          
          # Gate 1: Coverage threshold (minimum 80%)
          if (( $(echo "$COVERAGE_SCORE >= 80.0" | bc -l) )); then
            echo "   ‚úÖ Coverage Gate: ${COVERAGE_SCORE}% >= 80%"
          else
            echo "   ‚ùå Coverage Gate: ${COVERAGE_SCORE}% < 80%"
            echo "::error::Coverage below minimum threshold (80%)"
            exit 1
          fi
          
          # Gate 2: Critical keys validation (must find all 4)
          if [ "$CRITICAL_KEYS" -ge 4 ]; then
            echo "   ‚úÖ Critical Keys Gate: $CRITICAL_KEYS/4 found"
          else
            echo "   ‚ùå Critical Keys Gate: Only $CRITICAL_KEYS/4 critical keys found"
            echo "::error::Missing critical keys for automation"
            exit 1
          fi
          
          # Gate 3: Performance threshold (scan < 30 seconds)
          if [ "$SCAN_DURATION" -lt 30000 ]; then
            echo "   ‚úÖ Performance Gate: ${SCAN_DURATION}ms < 30s"
          else
            echo "   ‚ùå Performance Gate: ${SCAN_DURATION}ms >= 30s"
            echo "::warning::Scan duration exceeds performance target"
          fi
          
          # Set outputs
          echo "keys-validated=$TOTAL_KEYS" >> $GITHUB_OUTPUT
          echo "coverage-score=$COVERAGE_SCORE" >> $GITHUB_OUTPUT
          echo "critical-keys=$CRITICAL_KEYS" >> $GITHUB_OUTPUT
          echo "scan-duration=$SCAN_DURATION" >> $GITHUB_OUTPUT
          
          # Create validation report
          cat > validation-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "summary": {
              "keysFound": $TOTAL_KEYS,
              "keysExpected": $EXPECTED_KEYS,
              "criticalKeys": $CRITICAL_KEYS,
              "coverageScore": $COVERAGE_SCORE,
              "scanDuration": $SCAN_DURATION,
              "qualityGates": {
                "coverage": $(if (( $(echo "$COVERAGE_SCORE >= 80.0" | bc -l) )); then echo "true"; else echo "false"; fi),
                "criticalKeys": $(if [ "$CRITICAL_KEYS" -ge 4 ]; then echo "true"; else echo "false"; fi),
                "performance": $(if [ "$SCAN_DURATION" -lt 30000 ]; then echo "true"; else echo "false"; fi)
              }
            },
            "details": {
              "baseline": "test/golden_workspace/expected_keycheck.json",
              "strictMode": true,
              "validationMode": "baseline"
            }
          }
          EOF
      
      - name: Upload Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: keycheck-validation-report
          path: |
            validation-report.json
            keycheck_output.log
          retention-days: 30

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: validate-keycheck
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}
      
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ env.CACHE_VERSION }}-dart-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dart-${{ runner.os }}-
      
      - name: Install Dependencies
        run: dart pub get
      
      - name: Code Analysis
        run: |
          echo "üîç Running static analysis..."
          dart analyze --fatal-infos --fatal-warnings
          echo "‚úÖ Static analysis passed"
      
      - name: Format Check
        run: |
          echo "üé® Checking code formatting..."
          dart format --output=none --set-exit-if-changed .
          echo "‚úÖ Code formatting is correct"
      
      - name: Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          dart test --reporter expanded --chain-stack-traces
          echo "‚úÖ All tests passed"
      
      - name: Build Executable
        run: |
          echo "üî® Building executable..."
          dart compile exe bin/flutter_keycheck.dart -o flutter_keycheck
          echo "‚úÖ Executable built successfully"
          
          # Verify executable works
          ./flutter_keycheck --help > /dev/null
          echo "‚úÖ Executable verified"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validate-keycheck, test]
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_SDK }}
      
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ env.CACHE_VERSION }}-dart-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dart-${{ runner.os }}-
      
      - name: Install Dependencies
        run: dart pub get
      
      - name: Regression Testing
        run: |
          echo "üîÑ Running regression tests..."
          
          # Test golden workspace validation
          if [ -f "test/golden_workspace/expected_keycheck.json" ]; then
            dart test test/golden_workspace/ --reporter expanded || {
              echo "::error::Golden workspace tests failed"
              exit 1
            }
            echo "‚úÖ Golden workspace validation passed"
          fi
          
          # Test performance baseline
          if [ -f "test/golden_workspace/performance_baseline.json" ]; then
            echo "üöÄ Checking performance baseline..."
            BASELINE_DURATION=$(cat test/golden_workspace/performance_baseline.json | grep -o '"avgDuration":[0-9]*' | grep -o '[0-9]*')
            CURRENT_DURATION="${{ needs.validate-keycheck.outputs.scan-duration }}"
            
            if [ "$CURRENT_DURATION" -lt $((BASELINE_DURATION * 120 / 100)) ]; then
              echo "‚úÖ Performance within 20% of baseline (${CURRENT_DURATION}ms vs ${BASELINE_DURATION}ms)"
            else
              echo "‚ö†Ô∏è Performance regression detected (${CURRENT_DURATION}ms vs ${BASELINE_DURATION}ms baseline)"
            fi
          fi

  ci-summary:
    name: CI Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validate-keycheck, test, integration-test]
    if: always()
    
    steps:
      - name: Pipeline Results
        run: |
          echo "üìã Flutter KeyCheck CI Pipeline Summary"
          echo "========================================"
          echo ""
          echo "üîë KeyCheck Validation:"
          echo "   ‚Ä¢ Keys Validated: ${{ needs.validate-keycheck.outputs.keys-validated }}"
          echo "   ‚Ä¢ Coverage Score: ${{ needs.validate-keycheck.outputs.coverage-score }}%"
          echo "   ‚Ä¢ Critical Keys: ${{ needs.validate-keycheck.outputs.critical-keys }}"
          echo "   ‚Ä¢ Scan Duration: ${{ needs.validate-keycheck.outputs.scan-duration }}ms"
          echo ""
          echo "üß™ Pipeline Status:"
          echo "   ‚Ä¢ KeyCheck Validation: ${{ needs.validate-keycheck.result }}"
          echo "   ‚Ä¢ Test Suite: ${{ needs.test.result }}"
          echo "   ‚Ä¢ Integration Tests: ${{ needs.integration-test.result }}"
          echo ""
          
          # Check for failures
          FAILED=false
          if [ "${{ needs.validate-keycheck.result }}" != "success" ]; then
            echo "‚ùå KeyCheck validation failed"
            FAILED=true
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "‚ùå Test suite failed"
            FAILED=true
          fi
          if [ "${{ needs.integration-test.result }}" != "success" ]; then
            echo "‚ùå Integration tests failed"
            FAILED=true
          fi
          
          if [ "$FAILED" = "true" ]; then
            echo ""
            echo "üö® Pipeline failed - blocking deployment"
            echo "::error::CI pipeline validation failed"
            exit 1
          else
            echo "‚úÖ All validations passed - ready for deployment"
          fi
