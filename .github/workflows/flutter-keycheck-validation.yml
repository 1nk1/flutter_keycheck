name: Flutter KeyCheck Validation

on:
  push:
    branches: [main, develop, flutter_keycheck_v3]
    tags: ['v*']
    paths:
      - 'lib/**'
      - 'test/**'
      - '**.dart'
      - '.flutter_keycheck.yaml'
      - 'baseline.json'
      - 'pubspec.yaml'
      - '.github/workflows/flutter-keycheck-validation.yml'
  pull_request:
    branches: [main, develop, flutter_keycheck_v3]
    paths:
      - 'lib/**'
      - 'test/**'
      - '**.dart'
      - '.flutter_keycheck.yaml'
      - 'baseline.json'
      - 'pubspec.yaml'
      - '.github/workflows/flutter-keycheck-validation.yml'

concurrency:
  group: keycheck-${{ github.ref }}
  cancel-in-progress: true

env:
  DART_VERSION_STABLE: 'stable'
  DART_VERSION_BETA: 'beta'

jobs:
  # Pre-check job for early failure detection
  pre-check:
    name: Pre-validation Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      should-run: ${{ steps.changes.outputs.should-run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for relevant changes
        id: changes
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(dart|yaml)$|^lib/|^test/'; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=flutter-keycheck-${{ runner.os }}-${{ hashFiles('pubspec.lock', 'pubspec.yaml') }}" >> $GITHUB_OUTPUT

  # Matrix validation job for multiple Dart versions
  validate-matrix:
    name: Validate (${{ matrix.dart-version }})
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.should-run == 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        dart-version: [stable, beta]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Dart ${{ matrix.dart-version }}
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart-version }}

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ needs.pre-check.outputs.cache-key }}-${{ matrix.dart-version }}
          restore-keys: |
            flutter-keycheck-${{ runner.os }}-${{ matrix.dart-version }}-
            flutter-keycheck-${{ runner.os }}-

      - name: Install dependencies
        run: dart pub get

      - name: Verify package can be activated
        run: dart pub global activate --source path .

      - name: Create reports directory
        run: mkdir -p reports

      - name: Download baseline from main branch
        run: |
          git show origin/${{ github.base_ref }}:baseline.json > baseline-main.json 2>/dev/null || \
          echo '{"metadata": {"version": "3.0.0", "created": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}, "keys": []}' > baseline-main.json

      - name: Performance benchmark - Baseline creation
        id: perf-baseline
        run: |
          start_time=$(date +%s%N)
          dart run bin/flutter_keycheck.dart baseline create \
            --project-root . \
            --output baseline-current.json \
            --format json
          end_time=$(date +%s%N)
          duration_ms=$(( (end_time - start_time) / 1000000 ))
          echo "baseline-duration=$duration_ms" >> $GITHUB_OUTPUT
          echo "Baseline creation took ${duration_ms}ms"

      - name: Performance benchmark - Diff analysis
        id: perf-diff
        run: |
          start_time=$(date +%s%N)
          dart run bin/flutter_keycheck.dart diff \
            --baseline-old baseline-main.json \
            --baseline-new baseline-current.json \
            --output reports/diff-report-${{ matrix.dart-version }} \
            --format json \
            --format markdown \
            --format html
          diff_exit_code=$?
          end_time=$(date +%s%N)
          duration_ms=$(( (end_time - start_time) / 1000000 ))
          echo "diff-duration=$duration_ms" >> $GITHUB_OUTPUT
          echo "diff-exit-code=$diff_exit_code" >> $GITHUB_OUTPUT
          echo "Diff analysis took ${duration_ms}ms"

      - name: Performance benchmark - Validation
        id: perf-validate
        run: |
          start_time=$(date +%s%N)
          dart run bin/flutter_keycheck.dart validate \
            --project-root . \
            --baseline baseline-main.json \
            --fail-on-lost \
            --fail-on-rename \
            --max-drift 10 \
            --output reports/validation-report-${{ matrix.dart-version }} \
            --format junit \
            --format json \
            --format html
          validate_exit_code=$?
          end_time=$(date +%s%N)
          duration_ms=$(( (end_time - start_time) / 1000000 ))
          echo "validate-duration=$duration_ms" >> $GITHUB_OUTPUT
          echo "validate-exit-code=$validate_exit_code" >> $GITHUB_OUTPUT
          echo "validation-success=$([[ $validate_exit_code -eq 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "Validation took ${duration_ms}ms"
        continue-on-error: true

      - name: Generate performance summary
        run: |
          cat << 'EOF' > reports/performance-${{ matrix.dart-version }}.json
          {
            "dart_version": "${{ matrix.dart-version }}",
            "baseline_duration_ms": ${{ steps.perf-baseline.outputs.baseline-duration }},
            "diff_duration_ms": ${{ steps.perf-diff.outputs.diff-duration }},
            "validate_duration_ms": ${{ steps.perf-validate.outputs.validate-duration }},
            "total_duration_ms": $(( ${{ steps.perf-baseline.outputs.baseline-duration }} + ${{ steps.perf-diff.outputs.diff-duration }} + ${{ steps.perf-validate.outputs.validate-duration }} )),
            "validation_success": ${{ steps.perf-validate.outputs.validation-success }},
            "diff_exit_code": ${{ steps.perf-diff.outputs.diff-exit-code }},
            "validate_exit_code": ${{ steps.perf-validate.outputs.validate-exit-code }}
          }
          EOF

      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports-${{ matrix.dart-version }}
          path: |
            reports/
            baseline-*.json
          retention-days: 30

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: reports/validation-report-${{ matrix.dart-version }}.xml
          check_name: Flutter Key Validation Results (${{ matrix.dart-version }})
          comment_mode: off  # We'll handle comments separately

      - name: Store validation results
        id: results
        if: always()
        run: |
          echo "dart-version=${{ matrix.dart-version }}" >> $GITHUB_OUTPUT
          echo "validation-success=${{ steps.perf-validate.outputs.validation-success }}" >> $GITHUB_OUTPUT
          echo "has-diff=$([[ ${{ steps.perf-diff.outputs.diff-exit-code }} -ne 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

  # Aggregate results and create unified report
  aggregate-results:
    name: Aggregate Results & Report
    runs-on: ubuntu-latest
    needs: [pre-check, validate-matrix]
    if: always() && needs.pre-check.outputs.should-run == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup Dart (stable)
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies for report generation
        run: dart pub get

      - name: Generate unified HTML report
        run: |
          mkdir -p reports/unified
          
          # Check if we have validation reports
          if find artifacts -name "*.html" -type f | head -1 > /dev/null; then
            # Create unified HTML report
            cat << 'EOF' > reports/unified/validation-report.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Flutter KeyCheck Validation Report</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; }
                  .header { background: #f6f8fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .success { color: #28a745; } .error { color: #dc3545; } .warning { color: #ffc107; }
                  .performance { background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 10px 0; }
                  .dart-version { border: 1px solid #e1e4e8; margin: 15px 0; padding: 15px; border-radius: 8px; }
                  table { border-collapse: collapse; width: 100%; margin: 10px 0; }
                  th, td { border: 1px solid #e1e4e8; padding: 8px 12px; text-align: left; }
                  th { background: #f6f8fa; }
                  .metric { display: inline-block; margin: 5px 10px 5px 0; padding: 5px 10px; background: #f1f3f4; border-radius: 4px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🔑 Flutter KeyCheck Validation Report</h1>
                  <p><strong>PR:</strong> #${{ github.event.number }} - ${{ github.event.pull_request.title }}</p>
                  <p><strong>Branch:</strong> ${{ github.head_ref }} → ${{ github.base_ref }}</p>
                  <p><strong>Commit:</strong> ${{ github.event.pull_request.head.sha }}</p>
                  <p><strong>Generated:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
              </div>
          EOF
            
            # Add performance metrics
            echo '<div class="performance"><h2>📊 Performance Metrics</h2>' >> reports/unified/validation-report.html
            echo '<table><tr><th>Dart Version</th><th>Baseline Creation</th><th>Diff Analysis</th><th>Validation</th><th>Total</th><th>Status</th></tr>' >> reports/unified/validation-report.html
            
            for perf_file in artifacts/validation-reports-*/performance-*.json; do
              if [[ -f "$perf_file" ]]; then
                version=$(basename "$perf_file" | sed 's/performance-\(.*\)\.json/\1/')
                baseline_ms=$(jq -r '.baseline_duration_ms' "$perf_file")
                diff_ms=$(jq -r '.diff_duration_ms' "$perf_file")
                validate_ms=$(jq -r '.validate_duration_ms' "$perf_file")
                total_ms=$(jq -r '.total_duration_ms' "$perf_file")
                success=$(jq -r '.validation_success' "$perf_file")
                status_class=$([[ "$success" == "true" ]] && echo "success" || echo "error")
                status_text=$([[ "$success" == "true" ]] && echo "✅ Pass" || echo "❌ Fail")
                
                echo "<tr><td>$version</td><td>${baseline_ms}ms</td><td>${diff_ms}ms</td><td>${validate_ms}ms</td><td>${total_ms}ms</td><td class=\"$status_class\">$status_text</td></tr>" >> reports/unified/validation-report.html
              fi
            done
            echo '</table></div>' >> reports/unified/validation-report.html
            
            # Add individual reports
            for version in stable beta; do
              if [[ -d "artifacts/validation-reports-$version" ]]; then
                echo "<div class=\"dart-version\"><h2>Dart $version Results</h2>" >> reports/unified/validation-report.html
                
                # Include HTML report if available
                if [[ -f "artifacts/validation-reports-$version/reports/validation-report-$version.html" ]]; then
                  echo '<iframe src="data:text/html;base64,' >> reports/unified/validation-report.html
                  base64 -w 0 "artifacts/validation-reports-$version/reports/validation-report-$version.html" >> reports/unified/validation-report.html
                  echo '" width="100%" height="400" frameborder="0"></iframe>' >> reports/unified/validation-report.html
                fi
                
                echo '</div>' >> reports/unified/validation-report.html
              fi
            done
            
            echo '</body></html>' >> reports/unified/validation-report.html
          else
            echo "<html><body><h1>No validation reports generated</h1></body></html>" > reports/unified/validation-report.html
          fi

      - name: Generate aggregated performance report
        run: |
          # Create performance summary
          echo "# Performance Summary" > reports/unified/performance-summary.md
          echo "" >> reports/unified/performance-summary.md
          echo "| Dart Version | Baseline | Diff | Validation | Total | Status |" >> reports/unified/performance-summary.md
          echo "|--------------|----------|------|------------|-------|--------|" >> reports/unified/performance-summary.md
          
          for perf_file in artifacts/validation-reports-*/performance-*.json; do
            if [[ -f "$perf_file" ]]; then
              version=$(basename "$perf_file" | sed 's/performance-\(.*\)\.json/\1/')
              baseline_ms=$(jq -r '.baseline_duration_ms' "$perf_file")
              diff_ms=$(jq -r '.diff_duration_ms' "$perf_file")
              validate_ms=$(jq -r '.validate_duration_ms' "$perf_file")
              total_ms=$(jq -r '.total_duration_ms' "$perf_file")
              success=$(jq -r '.validation_success' "$perf_file")
              status=$([[ "$success" == "true" ]] && echo "✅" || echo "❌")
              
              echo "| $version | ${baseline_ms}ms | ${diff_ms}ms | ${validate_ms}ms | ${total_ms}ms | $status |" >> reports/unified/performance-summary.md
            fi
          done

      - name: Check overall validation status
        id: overall-status
        run: |
          overall_success=true
          stable_success=true
          beta_success=true
          
          # Check stable results
          if [[ -f "artifacts/validation-reports-stable/performance-stable.json" ]]; then
            stable_result=$(jq -r '.validation_success' "artifacts/validation-reports-stable/performance-stable.json")
            if [[ "$stable_result" != "true" ]]; then
              stable_success=false
              overall_success=false
            fi
          fi
          
          # Check beta results (non-blocking)
          if [[ -f "artifacts/validation-reports-beta/performance-beta.json" ]]; then
            beta_result=$(jq -r '.validation_success' "artifacts/validation-reports-beta/performance-beta.json")
            if [[ "$beta_result" != "true" ]]; then
              beta_success=false
              # Note: Beta failures don't fail the overall build
            fi
          fi
          
          echo "overall-success=$overall_success" >> $GITHUB_OUTPUT
          echo "stable-success=$stable_success" >> $GITHUB_OUTPUT
          echo "beta-success=$beta_success" >> $GITHUB_OUTPUT

      - name: Upload unified reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unified-validation-report
          path: reports/unified/
          retention-days: 30

      - name: Comment PR with detailed results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔑 Flutter KeyCheck Validation Report\n\n';
            
            // Add overall status
            const overallSuccess = '${{ steps.overall-status.outputs.overall-success }}' === 'true';
            const stableSuccess = '${{ steps.overall-status.outputs.stable-success }}' === 'true';
            const betaSuccess = '${{ steps.overall-status.outputs.beta-success }}' === 'true';
            
            if (overallSuccess) {
              comment += '✅ **Overall Status**: All validations passed\n\n';
            } else {
              comment += '❌ **Overall Status**: Validation failed - please review changes\n\n';
            }
            
            // Add version-specific status
            comment += '### Validation Results by Dart Version\n\n';
            comment += `| Version | Status | Notes |\n`;
            comment += `|---------|--------|-------|\n`;
            comment += `| Stable | ${stableSuccess ? '✅ Pass' : '❌ Fail'} | ${stableSuccess ? 'All checks passed' : 'Critical keys affected'} |\n`;
            comment += `| Beta | ${betaSuccess ? '✅ Pass' : '⚠️ Fail'} | ${betaSuccess ? 'All checks passed' : 'Non-blocking failure'} |\n\n`;
            
            // Add performance metrics if available
            try {
              const perfSummary = fs.readFileSync('reports/unified/performance-summary.md', 'utf8');
              comment += '### ⚡ Performance Metrics\n\n';
              comment += perfSummary + '\n\n';
            } catch (e) {
              comment += '### ⚡ Performance Metrics\n\nPerformance data not available\n\n';
            }
            
            // Add diff report from stable version
            try {
              const diffReport = fs.readFileSync('artifacts/validation-reports-stable/reports/diff-report-stable.md', 'utf8');
              comment += '### 📋 Key Changes Analysis\n\n';
              comment += diffReport + '\n\n';
            } catch (e) {
              comment += '### 📋 Key Changes Analysis\n\nNo changes detected or diff report unavailable\n\n';
            }
            
            // Add recommendations
            if (!overallSuccess) {
              comment += '### 🚨 Action Required\n\n';
              comment += '- Review the failing validation results above\n';
              comment += '- Ensure critical keys are not accidentally removed\n';
              comment += '- Update baseline if changes are intentional\n';
              comment += '- Check the detailed HTML report in the artifacts\n\n';
            }
            
            comment += '### 📁 Reports\n\n';
            comment += 'Detailed HTML reports and performance data are available in the workflow artifacts.\n\n';
            comment += '---\n';
            comment += '*Generated by Flutter KeyCheck validation workflow*';
            
            // Find and update existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Flutter KeyCheck Validation Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Send notification on failure
        if: failure() || (steps.overall-status.outputs.stable-success != 'true')
        uses: actions/github-script@v7
        with:
          script: |
            // Create a check run for better visibility
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Flutter KeyCheck Validation',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: 'failure',
              output: {
                title: 'Flutter KeyCheck Validation Failed',
                summary: 'Key validation failed - critical keys may have been affected',
                text: 'Please review the PR comment for detailed analysis and take corrective action.'
              }
            });

      - name: Fail job if stable validation failed
        if: steps.overall-status.outputs.stable-success != 'true'
        run: |
          echo "❌ Flutter KeyCheck validation failed on stable Dart version!"
          echo "Critical keys may have been lost or renamed. Please review the changes."
          echo "Check the PR comment and artifacts for detailed analysis."
          exit 1

  # Optional: Update baseline on merge to main
  update-baseline:
    name: Update Baseline
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-keycheck-${{ runner.os }}-${{ hashFiles('pubspec.lock', 'pubspec.yaml') }}
          restore-keys: flutter-keycheck-${{ runner.os }}-

      - name: Install dependencies
        run: dart pub get

      - name: Update baseline
        run: |
          dart run bin/flutter_keycheck.dart baseline create \
            --project-root . \
            --output baseline.json \
            --format json

      - name: Commit updated baseline
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add baseline.json
          if ! git diff --staged --quiet; then
            git commit -m "chore: update key baseline [skip ci]
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          else
            echo "No changes to baseline.json"
          fi