name: Release Matrix

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

jobs:
  test-matrix:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        dart-sdk: [ stable, beta ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with: 
          sdk: ${{ matrix.dart-sdk }}
      - name: Cache pub/.dart_tool
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: pub-${{ runner.os }}-${{ matrix.dart-sdk }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: pub-${{ runner.os }}-${{ matrix.dart-sdk }}-
      - run: dart pub get
      - name: Blocking suite (release)
        run: dart test --chain-stack-traces -j 2 -r compact --exclude-tags nonblocking
      - name: Nonblocking suite (release, continue-on-error)
        if: always()
        continue-on-error: true
        run: dart test --chain-stack-traces -j 1 -r compact --tags nonblocking

  release-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with: 
          sdk: stable
      - name: Cache pub/.dart_tool
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: pub-${{ runner.os }}-
      - run: dart pub get
      - name: Verify version matches tag
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          
          # Handle pre-release versions (e.g., 3.0.0-rc.1)
          if [[ "$TAG" == *"-"* ]]; then
            echo "Pre-release tag detected: $TAG"
          fi
          
          if [ "$TAG" != "$VERSION" ]; then
            echo "ERROR: Tag version ($TAG) does not match pubspec.yaml version ($VERSION)"
            exit 1
          fi
          echo "‚úì Version $VERSION matches tag"
      - name: Run publish dry-run
        run: dart pub publish --dry-run
      - name: Check package score
        run: |
          dart pub global activate pana
          pana --no-warning --exit-code-threshold 90 .
      - name: Build executable for all platforms
        run: |
          dart compile exe bin/flutter_keycheck.dart -o flutter_keycheck-linux
          echo "‚úì Linux executable built successfully"

  release-summary:
    name: Release Matrix Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, release-validation]
    if: always()
    steps:
      - name: Check release readiness
        run: |
          if [ "${{ needs.test-matrix.result }}" != "success" ]; then
            echo "‚ö†Ô∏è Test matrix had failures (some platforms/SDK combinations may have issues)"
          fi
          if [ "${{ needs.release-validation.result }}" != "success" ]; then
            echo "‚ùå Release validation failed"
            exit 1
          fi
          echo "‚úÖ Release validation passed!"
          echo "üì¶ Ready for publishing to pub.dev"