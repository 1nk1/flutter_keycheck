import 'package:flutter_keycheck/src/models/scan_result.dart';
import 'package:flutter_keycheck/src/models/validation_result.dart';

/// Comprehensive HTML dashboard generator for flutter_keycheck
class HtmlReporter {
  final bool includeStyles;
  final bool includeScripts;
  
  HtmlReporter({
    this.includeStyles = true,
    this.includeScripts = true,
  });
  
  /// Generate comprehensive HTML dashboard for scan results
  String generateScanReport(ScanResult result) {
    final buffer = StringBuffer();
    
    // HTML header
    buffer.writeln('<!DOCTYPE html>');
    buffer.writeln('<html lang="en">');
    buffer.writeln('<head>');
    buffer.writeln('  <meta charset="UTF-8">');
    buffer.writeln('  <meta name="viewport" content="width=device-width, initial-scale=1.0">');
    buffer.writeln('  <title>Flutter KeyCheck Dashboard</title>');
    
    if (includeStyles) {
      buffer.writeln(_getDashboardStyles());
    }
    
    buffer.writeln('</head>');
    buffer.writeln('<body>');
    
    // Navigation
    buffer.writeln(_generateNavigation());
    
    // Header section
    buffer.writeln('  <header class="dashboard-header">');
    buffer.writeln('    <div class="container">');
    buffer.writeln('      <h1>🔍 Flutter KeyCheck Dashboard</h1>');
    buffer.writeln('      <div class="timestamp">Generated: ${DateTime.now().toIso8601String()}</div>');
    buffer.writeln('      <div class="export-controls">');
    buffer.writeln('        <button onclick="exportToPDF()" class="btn btn-primary">📄 Export PDF</button>');
    buffer.writeln('        <button onclick="exportToCSV()" class="btn btn-secondary">📊 Export CSV</button>');
    buffer.writeln('        <button onclick="toggleTheme()" class="btn btn-outline">🌙 Dark Mode</button>');
    buffer.writeln('      </div>');
    buffer.writeln('    </div>');
    buffer.writeln('  </header>');
    
    buffer.writeln('  <main class="dashboard-main">');
    buffer.writeln('    <div class="container">');
    
    // Overview Dashboard
    buffer.writeln('      <section id="overview" class="dashboard-section">');
    buffer.writeln('        <h2>📊 Overview</h2>');
    buffer.writeln(_generateOverviewDashboard(result));
    buffer.writeln('      </section>');
    
    // Interactive Metrics
    buffer.writeln('      <section id="metrics" class="dashboard-section">');
    buffer.writeln('        <h2>📈 Interactive Metrics</h2>');
    buffer.writeln(_generateInteractiveMetrics(result));
    buffer.writeln('      </section>');
    
    // Key Coverage Analysis
    buffer.writeln('      <section id="coverage" class="dashboard-section">');
    buffer.writeln('        <h2>🎯 Key Coverage Analysis</h2>');
    buffer.writeln(_generateCoverageAnalysis(result));
    buffer.writeln('      </section>');
    
    // Performance Metrics
    buffer.writeln('      <section id="performance" class="dashboard-section">');
    buffer.writeln('        <h2>⚡ Performance Metrics</h2>');
    buffer.writeln(_generatePerformanceMetrics(result));
    buffer.writeln('      </section>');
    
    // Key Usage Patterns
    buffer.writeln('      <section id="patterns" class="dashboard-section">');
    buffer.writeln('        <h2>🔑 Key Usage Patterns</h2>');
    buffer.writeln(_generateKeyPatterns(result));
    buffer.writeln('      </section>');
    
    // File Analysis
    buffer.writeln('      <section id="files" class="dashboard-section">');
    buffer.writeln('        <h2>📁 File-by-File Analysis</h2>');
    buffer.writeln(_generateFileAnalysis(result));
    buffer.writeln('      </section>');
    
    // Historical Trends (if baseline data exists)
    buffer.writeln('      <section id="trends" class="dashboard-section">');
    buffer.writeln('        <h2>📊 Historical Trends</h2>');
    buffer.writeln(_generateHistoricalTrends(result));
    buffer.writeln('      </section>');
    
    // Issues & Recommendations
    if (result.blindSpots.isNotEmpty) {
      buffer.writeln('      <section id="issues" class="dashboard-section">');
      buffer.writeln('        <h2>⚠️ Issues & Recommendations</h2>');
      buffer.writeln(_generateIssuesSection(result));
      buffer.writeln('      </section>');
    }
    
    buffer.writeln('    </div>');
    buffer.writeln('  </main>');
    
    // Footer
    buffer.writeln('  <footer class="dashboard-footer">');
    buffer.writeln('    <div class="container">');
    buffer.writeln('      <p>Generated by Flutter KeyCheck v3.0.0 | Dashboard v2.0</p>');
    buffer.writeln('    </div>');
    buffer.writeln('  </footer>');
    
    if (includeScripts) {
      buffer.writeln(_getDashboardScripts(result));
    }
    
    buffer.writeln('</body>');
    buffer.writeln('</html>');
    
    return buffer.toString();
  }
  
  /// Generate HTML report for validation results with dashboard features
  String generateValidationReport(ValidationResult result) {
    final buffer = StringBuffer();
    
    // HTML header
    buffer.writeln('<!DOCTYPE html>');
    buffer.writeln('<html lang="en">');
    buffer.writeln('<head>');
    buffer.writeln('  <meta charset="UTF-8">');
    buffer.writeln('  <meta name="viewport" content="width=device-width, initial-scale=1.0">');
    buffer.writeln('  <title>Flutter KeyCheck Validation Dashboard</title>');
    
    if (includeStyles) {
      buffer.writeln(_getDashboardStyles());
    }
    
    buffer.writeln('</head>');
    buffer.writeln('<body>');
    
    // Navigation
    buffer.writeln(_generateNavigation());
    
    // Header with status
    final statusClass = result.hasViolations ? 'failed' : 'passed';
    buffer.writeln('  <header class="dashboard-header $statusClass">');
    buffer.writeln('    <div class="container">');
    buffer.writeln('      <h1>${result.hasViolations ? '❌' : '✅'} Validation Dashboard</h1>');
    buffer.writeln('      <div class="status-badge ${statusClass}">${result.hasViolations ? 'FAILED' : 'PASSED'}</div>');
    buffer.writeln('      <div class="export-controls">');
    buffer.writeln('        <button onclick="exportToPDF()" class="btn btn-primary">📄 Export PDF</button>');
    buffer.writeln('        <button onclick="exportToCSV()" class="btn btn-secondary">📊 Export CSV</button>');
    buffer.writeln('      </div>');
    buffer.writeln('    </div>');
    buffer.writeln('  </header>');
    
    buffer.writeln('  <main class="dashboard-main">');
    buffer.writeln('    <div class="container">');
    
    // Validation Summary
    buffer.writeln('      <section id="summary" class="dashboard-section">');
    buffer.writeln('        <h2>📋 Validation Summary</h2>');
    buffer.writeln(_generateValidationSummary(result));
    buffer.writeln('      </section>');
    
    // Violations Analysis
    if (result.hasViolations) {
      buffer.writeln('      <section id="violations" class="dashboard-section">');
      buffer.writeln('        <h2>🚨 Violations Analysis</h2>');
      buffer.writeln(_generateViolationsAnalysis(result));
      buffer.writeln('      </section>');
    }
    
    // Drift Analysis
    buffer.writeln('      <section id="drift" class="dashboard-section">');
    buffer.writeln('        <h2>📈 Drift Analysis</h2>');
    buffer.writeln(_generateDriftAnalysis(result));
    buffer.writeln('      </section>');
    
    buffer.writeln('    </div>');
    buffer.writeln('  </main>');
    
    buffer.writeln('  <footer class="dashboard-footer">');
    buffer.writeln('    <div class="container">');
    buffer.writeln('      <p>Generated by Flutter KeyCheck v3.0.0 | Validation Dashboard v2.0</p>');
    buffer.writeln('    </div>');
    buffer.writeln('  </footer>');
    
    if (includeScripts) {
      buffer.writeln(_getValidationScripts(result));
    }
    
    buffer.writeln('</body>');
    buffer.writeln('</html>');
    
    return buffer.toString();
  }
  
  String _generateNavigation() {
    return '''
    <nav class="dashboard-nav">
      <div class="container">
        <ul class="nav-links">
          <li><a href="#overview" class="nav-link">Overview</a></li>
          <li><a href="#metrics" class="nav-link">Metrics</a></li>
          <li><a href="#coverage" class="nav-link">Coverage</a></li>
          <li><a href="#performance" class="nav-link">Performance</a></li>
          <li><a href="#patterns" class="nav-link">Patterns</a></li>
          <li><a href="#files" class="nav-link">Files</a></li>
          <li><a href="#trends" class="nav-link">Trends</a></li>
          <li><a href="#issues" class="nav-link">Issues</a></li>
        </ul>
      </div>
    </nav>
    ''';
  }
  
  String _generateOverviewDashboard(ScanResult result) {
    final keysByType = _getKeysByType(result);
    final totalKeys = result.keyUsages.length;
    final filesScanned = result.metrics.scannedFiles;
    final duration = result.duration.inMilliseconds;
    
    return '''
    <div class="overview-grid">
      <div class="overview-card primary">
        <div class="card-icon">🔑</div>
        <div class="card-content">
          <div class="card-value">$totalKeys</div>
          <div class="card-label">Total Keys Found</div>
        </div>
      </div>
      
      <div class="overview-card success">
        <div class="card-icon">📁</div>
        <div class="card-content">
          <div class="card-value">$filesScanned</div>
          <div class="card-label">Files Scanned</div>
        </div>
      </div>
      
      <div class="overview-card info">
        <div class="card-icon">📊</div>
        <div class="card-content">
          <div class="card-value">${result.metrics.fileCoverage.toStringAsFixed(1)}%</div>
          <div class="card-label">Coverage</div>
        </div>
      </div>
      
      <div class="overview-card warning">
        <div class="card-icon">⚡</div>
        <div class="card-content">
          <div class="card-value">${duration}ms</div>
          <div class="card-label">Scan Duration</div>
        </div>
      </div>
    </div>
    
    <div class="key-distribution">
      <h3>Key Type Distribution</h3>
      <div class="distribution-chart">
        <canvas id="keyTypeChart" width="400" height="200"></canvas>
      </div>
      <div class="distribution-legend">
        ${keysByType.entries.map((e) => 
          '<div class="legend-item"><span class="legend-color" style="background-color: ${_getColorForKeyType(e.key)}"></span>${e.key}: ${e.value}</div>'
        ).join('\n        ')}
      </div>
    </div>
    ''';
  }
  
  String _generateInteractiveMetrics(ScanResult result) {
    return '''
    <div class="metrics-container">
      <div class="metric-charts">
        <div class="chart-container">
          <h3>Coverage Analysis</h3>
          <canvas id="coverageChart" width="300" height="300"></canvas>
        </div>
        
        <div class="chart-container">
          <h3>Performance Breakdown</h3>
          <canvas id="performanceChart" width="300" height="200"></canvas>
        </div>
        
        <div class="chart-container">
          <h3>Key Sources</h3>
          <canvas id="sourcesChart" width="300" height="300"></canvas>
        </div>
      </div>
      
      <div class="metrics-details">
        <div class="metric-group">
          <h4>Detection Metrics</h4>
          <div class="metric-list">
            ${result.metrics.detectorHits.entries.map((e) => 
              '<div class="metric-item"><span class="metric-name">${e.key}</span><span class="metric-value">${e.value}</span></div>'
            ).join('\n            ')}
          </div>
        </div>
        
        <div class="metric-group">
          <h4>Cache Performance</h4>
          <div class="metric-list">
            <div class="metric-item"><span class="metric-name">Cache Hits</span><span class="metric-value">${result.metrics.cacheHits}</span></div>
            <div class="metric-item"><span class="metric-name">Cache Misses</span><span class="metric-value">${result.metrics.cacheMisses}</span></div>
            <div class="metric-item"><span class="metric-name">Hit Rate</span><span class="metric-value">${_getCacheHitRate(result.metrics)}</span></div>
          </div>
        </div>
      </div>
    </div>
    ''';
  }
  
  String _generateCoverageAnalysis(ScanResult result) {
    final coverageData = [
      {'name': 'File Coverage', 'value': result.metrics.fileCoverage, 'target': 90.0},
      {'name': 'Widget Coverage', 'value': result.metrics.widgetCoverage, 'target': 85.0},
      {'name': 'Handler Coverage', 'value': result.metrics.handlerCoverage, 'target': 80.0},
    ];
    
    return '''
    <div class="coverage-analysis">
      <div class="coverage-overview">
        ${coverageData.map((data) => '''
        <div class="coverage-item">
          <div class="coverage-header">
            <span class="coverage-name">${data['name']}</span>
            <span class="coverage-value">${(data['value'] as double).toStringAsFixed(1)}%</span>
          </div>
          <div class="coverage-bar">
            <div class="coverage-progress" style="width: ${data['value']}%; background-color: ${_getCoverageColor(data['value'] as double, data['target'] as double)}"></div>
            <div class="coverage-target" style="left: ${data['target']}%"></div>
          </div>
          <div class="coverage-status ${_getCoverageStatus(data['value'] as double, data['target'] as double)}">
            ${_getCoverageIcon(data['value'] as double, data['target'] as double)} ${_getCoverageText(data['value'] as double, data['target'] as double)}
          </div>
        </div>
        ''').join('\n        ')}
      </div>
      
      <div class="coverage-details">
        <h4>Coverage Breakdown by File Type</h4>
        <canvas id="fileTypeCoverageChart" width="400" height="200"></canvas>
      </div>
    </div>
    ''';
  }
  
  String _generatePerformanceMetrics(ScanResult result) {
    final memoryUsage = (result.metrics.avgFileSizeKB * result.metrics.scannedFiles / 1024).toStringAsFixed(1);
    final throughput = (result.metrics.scannedFiles / (result.duration.inMilliseconds / 1000)).toStringAsFixed(1);
    
    return '''
    <div class="performance-dashboard">
      <div class="performance-cards">
        <div class="perf-card">
          <div class="perf-icon">⚡</div>
          <div class="perf-content">
            <div class="perf-value">${result.duration.inMilliseconds}ms</div>
            <div class="perf-label">Total Scan Time</div>
          </div>
        </div>
        
        <div class="perf-card">
          <div class="perf-icon">🚀</div>
          <div class="perf-content">
            <div class="perf-value">${throughput}</div>
            <div class="perf-label">Files/Second</div>
          </div>
        </div>
        
        <div class="perf-card">
          <div class="perf-icon">💾</div>
          <div class="perf-content">
            <div class="perf-value">${memoryUsage}MB</div>
            <div class="perf-label">Estimated Memory</div>
          </div>
        </div>
        
        <div class="perf-card">
          <div class="perf-icon">🔄</div>
          <div class="perf-content">
            <div class="perf-value">${result.metrics.parallelFilesProcessed}</div>
            <div class="perf-label">Parallel Files</div>
          </div>
        </div>
      </div>
      
      <div class="performance-chart">
        <h4>Performance Trends</h4>
        <canvas id="performanceTrendChart" width="600" height="200"></canvas>
      </div>
    </div>
    ''';
  }
  
  String _generateKeyPatterns(ScanResult result) {
    final keysByType = _getKeysByType(result);
    final keysBySource = _groupKeysBySource(result.keyUsages);
    
    return '''
    <div class="patterns-analysis">
      <div class="patterns-grid">
        <div class="pattern-section">
          <h4>Key Types Distribution</h4>
          <div class="pattern-list">
            ${keysByType.entries.map((e) => '''
            <div class="pattern-item">
              <div class="pattern-name">
                <span class="pattern-icon">${_getKeyTypeIcon(e.key)}</span>
                ${e.key}
              </div>
              <div class="pattern-count">${e.value}</div>
              <div class="pattern-percentage">${(e.value / result.keyUsages.length * 100).toStringAsFixed(1)}%</div>
            </div>
            ''').join('\n            ')}
          </div>
        </div>
        
        <div class="pattern-section">
          <h4>Sources Breakdown</h4>
          <div class="pattern-list">
            ${keysBySource.entries.take(10).map((e) => '''
            <div class="pattern-item">
              <div class="pattern-name">
                <span class="pattern-icon">📦</span>
                ${e.key}
              </div>
              <div class="pattern-count">${e.value.length}</div>
              <div class="pattern-percentage">${(e.value.length / result.keyUsages.length * 100).toStringAsFixed(1)}%</div>
            </div>
            ''').join('\n            ')}
          </div>
        </div>
      </div>
      
      <div class="patterns-visualization">
        <h4>Key Usage Heatmap</h4>
        <canvas id="usageHeatmapChart" width="800" height="300"></canvas>
      </div>
    </div>
    ''';
  }
  
  String _generateFileAnalysis(ScanResult result) {
    final sortedFiles = result.fileAnalyses.entries.toList()
      ..sort((a, b) => b.value.keysFound.length.compareTo(a.value.keysFound.length));
    
    return '''
    <div class="file-analysis">
      <div class="file-controls">
        <div class="search-box">
          <input type="text" id="fileSearch" placeholder="Search files..." onkeyup="filterFiles()">
        </div>
        <div class="filter-controls">
          <select id="sortBy" onchange="sortFiles()">
            <option value="keys">Sort by Keys</option>
            <option value="name">Sort by Name</option>
            <option value="size">Sort by Size</option>
          </select>
          <select id="filterBy" onchange="filterFiles()">
            <option value="all">All Files</option>
            <option value="high">High Key Count (>10)</option>
            <option value="medium">Medium Key Count (5-10)</option>
            <option value="low">Low Key Count (<5)</option>
          </select>
        </div>
      </div>
      
      <div class="files-table-container">
        <table class="files-table" id="filesTable">
          <thead>
            <tr>
              <th>File</th>
              <th>Keys Found</th>
              <th>Widgets</th>
              <th>Coverage</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            ${sortedFiles.map((entry) {
              final file = entry.value;
              final coverage = file.widgetCount > 0 ? (file.widgetsWithKeys / file.widgetCount * 100).toStringAsFixed(1) : '0.0';
              final status = _getFileStatus(file);
              
              return '''
              <tr class="file-row" data-keys="${file.keysFound.length}" data-name="${file.relativePath}">
                <td class="file-name">
                  <span class="file-icon">${_getFileIcon(file.relativePath)}</span>
                  <span class="file-path">${file.relativePath}</span>
                </td>
                <td class="keys-count">
                  <span class="count-badge">${file.keysFound.length}</span>
                </td>
                <td class="widgets-count">${file.widgetCount}</td>
                <td class="coverage-cell">
                  <div class="mini-progress">
                    <div class="mini-progress-bar" style="width: ${coverage}%"></div>
                  </div>
                  <span class="coverage-text">${coverage}%</span>
                </td>
                <td class="status-cell">
                  <span class="status-badge ${status.toLowerCase()}">${status}</span>
                </td>
                <td class="actions-cell">
                  <button onclick="showFileDetails('${file.relativePath}')" class="btn btn-sm">Details</button>
                </td>
              </tr>
              ''';
            }).join('\n            ')}
          </tbody>
        </table>
      </div>
    </div>
    
    <div id="fileDetailModal" class="modal">
      <div class="modal-content">
        <span class="modal-close" onclick="closeFileDetails()">&times;</span>
        <div id="fileDetailContent"></div>
      </div>
    </div>
    ''';
  }
  
  String _generateHistoricalTrends(ScanResult result) {
    // This would typically load from historical data files
    return '''
    <div class="trends-analysis">
      <div class="trends-message">
        <div class="message-icon">📊</div>
        <div class="message-content">
          <h4>Historical Trend Analysis</h4>
          <p>Historical trend data will be available after multiple scans. Run the scanner regularly to build trend history.</p>
          
          <div class="trend-placeholder">
            <h5>Future Trend Metrics:</h5>
            <ul>
              <li>📈 Key count growth over time</li>
              <li>📊 Coverage improvement trends</li>
              <li>⚡ Performance optimization tracking</li>
              <li>🔍 Pattern evolution analysis</li>
              <li>📁 File complexity trends</li>
            </ul>
          </div>
        </div>
      </div>
      
      <div class="baseline-info">
        <h4>Current Baseline</h4>
        <div class="baseline-stats">
          <div class="baseline-item">
            <span class="baseline-label">Total Keys:</span>
            <span class="baseline-value">${result.keyUsages.length}</span>
          </div>
          <div class="baseline-item">
            <span class="baseline-label">Files Scanned:</span>
            <span class="baseline-value">${result.metrics.scannedFiles}</span>
          </div>
          <div class="baseline-item">
            <span class="baseline-label">Coverage:</span>
            <span class="baseline-value">${result.metrics.fileCoverage.toStringAsFixed(1)}%</span>
          </div>
          <div class="baseline-item">
            <span class="baseline-label">Scan Time:</span>
            <span class="baseline-value">${result.duration.inMilliseconds}ms</span>
          </div>
        </div>
      </div>
    </div>
    ''';
  }
  
  String _generateIssuesSection(ScanResult result) {
    final groupedIssues = <String, List<BlindSpot>>{};
    for (final spot in result.blindSpots) {
      groupedIssues.putIfAbsent(spot.severity, () => []).add(spot);
    }
    
    return '''
    <div class="issues-analysis">
      ${groupedIssues.entries.map((group) => '''
      <div class="issue-group ${group.key}">
        <h4 class="issue-header">
          ${_getSeverityIcon(group.key)} ${group.key.toUpperCase()} Issues (${group.value.length})
        </h4>
        <div class="issue-list">
          ${group.value.map((issue) => '''
          <div class="issue-item">
            <div class="issue-content">
              <div class="issue-title">${issue.type}</div>
              <div class="issue-message">${issue.message}</div>
              ${issue.location != 'global' ? '<div class="issue-location">📍 ${issue.location}</div>' : ''}
            </div>
            <div class="issue-actions">
              <button onclick="showIssueDetails('${issue.type}')" class="btn btn-sm">Details</button>
            </div>
          </div>
          ''').join('\n          ')}
        </div>
      </div>
      ''').join('\n      ')}
      
      <div class="recommendations">
        <h4>🔧 Recommendations</h4>
        <div class="recommendation-list">
          ${_generateRecommendations(result).map((rec) => '''
          <div class="recommendation-item">
            <div class="recommendation-icon">${rec['icon']}</div>
            <div class="recommendation-content">
              <div class="recommendation-title">${rec['title']}</div>
              <div class="recommendation-description">${rec['description']}</div>
            </div>
          </div>
          ''').join('\n          ')}
        </div>
      </div>
    </div>
    ''';
  }
  
  String _generateValidationSummary(ValidationResult result) {
    return '''
    <div class="validation-summary">
      <div class="summary-cards">
        <div class="summary-card ${result.hasViolations ? 'danger' : 'success'}">
          <div class="card-icon">${result.hasViolations ? '❌' : '✅'}</div>
          <div class="card-content">
            <div class="card-value">${result.hasViolations ? 'FAILED' : 'PASSED'}</div>
            <div class="card-label">Validation Status</div>
          </div>
        </div>
        
        <div class="summary-card info">
          <div class="card-icon">📊</div>
          <div class="card-content">
            <div class="card-value">${result.summary.totalKeys}</div>
            <div class="card-label">Total Keys</div>
          </div>
        </div>
        
        <div class="summary-card warning">
          <div class="card-icon">📈</div>
          <div class="card-content">
            <div class="card-value">${result.driftPercentage.toStringAsFixed(1)}%</div>
            <div class="card-label">Drift Percentage</div>
          </div>
        </div>
        
        <div class="summary-card secondary">
          <div class="card-icon">🔄</div>
          <div class="card-content">
            <div class="card-value">${result.totalViolations}</div>
            <div class="card-label">Violations</div>
          </div>
        </div>
      </div>
    </div>
    ''';
  }
  
  String _generateViolationsAnalysis(ValidationResult result) {
    return '''
    <div class="violations-analysis">
      <div class="violations-summary">
        <canvas id="violationsChart" width="300" height="300"></canvas>
      </div>
      
      <div class="violations-details">
        ${result.violations.map((violation) => '''
        <div class="violation-item ${violation.severity}">
          <div class="violation-header">
            <span class="violation-type">${violation.type}</span>
            <span class="violation-severity ${violation.severity}">${violation.severity.toUpperCase()}</span>
          </div>
          <div class="violation-message">${violation.message}</div>
          <div class="violation-remediation">
            <strong>Remediation:</strong> ${violation.remediation}
          </div>
          ${violation.key != null ? '<div class="violation-key">Key: ${violation.key!.id}</div>' : ''}
        </div>
        ''').join('\n        ')}
      </div>
    </div>
    ''';
  }
  
  String _generateDriftAnalysis(ValidationResult result) {
    final driftLevel = result.driftPercentage > 15 ? 'high' : 
                      result.driftPercentage > 5 ? 'medium' : 'low';
    
    return '''
    <div class="drift-analysis">
      <div class="drift-gauge">
        <div class="gauge-container">
          <canvas id="driftGauge" width="300" height="200"></canvas>
          <div class="gauge-value">
            <span class="drift-percentage">${result.driftPercentage.toStringAsFixed(1)}%</span>
            <span class="drift-label">Drift</span>
          </div>
        </div>
      </div>
      
      <div class="drift-details">
        <div class="drift-item">
          <span class="drift-metric">Lost Keys:</span>
          <span class="drift-value lost">${result.summary.lostKeys}</span>
        </div>
        <div class="drift-item">
          <span class="drift-metric">Added Keys:</span>
          <span class="drift-value added">${result.summary.addedKeys}</span>
        </div>
        <div class="drift-item">
          <span class="drift-metric">Renamed Keys:</span>
          <span class="drift-value renamed">${result.summary.renamedKeys}</span>
        </div>
        <div class="drift-item">
          <span class="drift-metric">Deprecated in Use:</span>
          <span class="drift-value deprecated">${result.summary.deprecatedInUse}</span>
        </div>
      </div>
      
      <div class="drift-assessment ${driftLevel}">
        <h4>${_getDriftAssessmentTitle(driftLevel)}</h4>
        <p>${_getDriftAssessmentMessage(driftLevel)}</p>
      </div>
    </div>
    ''';
  }
  
  // Helper methods
  Map<String, int> _getKeysByType(ScanResult result) {
    final typeCount = <String, int>{};
    for (final usage in result.keyUsages.values) {
      for (final location in usage.locations) {
        final context = location.context.toLowerCase();
        String type = 'Unknown';
        
        if (context.contains('valuekey')) type = 'ValueKey';
        else if (context.contains('globalkey')) type = 'GlobalKey';
        else if (context.contains('objectkey')) type = 'ObjectKey';
        else if (context.contains('uniquekey')) type = 'UniqueKey';
        else if (context.contains('key(')) type = 'Key';
        else if (context.contains('keyconstants')) type = 'KeyConstants';
        
        typeCount[type] = (typeCount[type] ?? 0) + 1;
      }
    }
    return typeCount;
  }
  
  Map<String, List<String>> _groupKeysBySource(Map<String, KeyUsage> keyUsages) {
    final grouped = <String, List<String>>{};
    for (final usage in keyUsages.values) {
      final source = usage.package ?? usage.source;
      grouped.putIfAbsent(source, () => []).add(usage.id);
    }
    return grouped;
  }
  
  String _getCacheHitRate(ScanMetrics metrics) {
    final total = metrics.cacheHits + metrics.cacheMisses;
    if (total == 0) return '0%';
    return '${(metrics.cacheHits / total * 100).toStringAsFixed(1)}%';
  }
  
  String _getColorForKeyType(String type) {
    const colors = {
      'ValueKey': '#3b82f6',
      'GlobalKey': '#22c55e', 
      'ObjectKey': '#f59e0b',
      'UniqueKey': '#ef4444',
      'Key': '#8b5cf6',
      'KeyConstants': '#06b6d4',
      'Unknown': '#64748b',
    };
    return colors[type] ?? '#64748b';
  }
  
  String _getKeyTypeIcon(String type) {
    const icons = {
      'ValueKey': '🔤',
      'GlobalKey': '🌐',
      'ObjectKey': '📦',
      'UniqueKey': '🔑',
      'Key': '🗝️',
      'KeyConstants': '⚙️',
      'Unknown': '❓',
    };
    return icons[type] ?? '❓';
  }
  
  String _getCoverageColor(double value, double target) {
    if (value >= target) return '#22c55e';
    if (value >= target * 0.8) return '#f59e0b';
    return '#ef4444';
  }
  
  String _getCoverageStatus(double value, double target) {
    if (value >= target) return 'excellent';
    if (value >= target * 0.8) return 'good';
    return 'needs-improvement';
  }
  
  String _getCoverageIcon(double value, double target) {
    if (value >= target) return '✅';
    if (value >= target * 0.8) return '⚠️';
    return '❌';
  }
  
  String _getCoverageText(double value, double target) {
    if (value >= target) return 'Excellent';
    if (value >= target * 0.8) return 'Good';
    return 'Needs Improvement';
  }
  
  String _getFileIcon(String path) {
    if (path.endsWith('.dart')) return '🎯';
    if (path.endsWith('.yaml') || path.endsWith('.yml')) return '⚙️';
    if (path.endsWith('.json')) return '📋';
    return '📄';
  }
  
  String _getFileStatus(FileAnalysis file) {
    if (file.keysFound.isEmpty) return 'No Keys';
    if (file.widgetCount > 0 && file.widgetsWithKeys / file.widgetCount > 0.8) return 'Good';
    if (file.widgetCount > 0 && file.widgetsWithKeys / file.widgetCount > 0.5) return 'Fair';
    return 'Needs Review';
  }
  
  String _getSeverityIcon(String severity) {
    switch (severity.toLowerCase()) {
      case 'error': return '🔴';
      case 'warning': return '🟡';
      case 'info': return '🔵';
      default: return '⚪';
    }
  }
  
  List<Map<String, String>> _generateRecommendations(ScanResult result) {
    final recommendations = <Map<String, String>>[];
    
    if (result.metrics.fileCoverage < 80) {
      recommendations.add({
        'icon': '📊',
        'title': 'Improve File Coverage',
        'description': 'Consider adding more key identifiers to increase test automation coverage.',
      });
    }
    
    if (result.metrics.cacheHits + result.metrics.cacheMisses > 0 && 
        result.metrics.cacheHits / (result.metrics.cacheHits + result.metrics.cacheMisses) < 0.8) {
      recommendations.add({
        'icon': '🚀',
        'title': 'Optimize Caching',
        'description': 'Low cache hit rate detected. Consider running incremental scans for better performance.',
      });
    }
    
    if (result.blindSpots.any((spot) => spot.severity == 'error')) {
      recommendations.add({
        'icon': '🔧',
        'title': 'Address Critical Issues',
        'description': 'Critical issues detected that may impact scan accuracy. Review and resolve immediately.',
      });
    }
    
    return recommendations;
  }
  
  String _getDriftAssessmentTitle(String level) {
    switch (level) {
      case 'high': return '🚨 High Drift Detected';
      case 'medium': return '⚠️ Moderate Drift';
      case 'low': return '✅ Low Drift - Good Stability';
      default: return 'Unknown Drift Level';
    }
  }
  
  String _getDriftAssessmentMessage(String level) {
    switch (level) {
      case 'high': return 'Significant changes detected. Review key modifications and update baselines if needed.';
      case 'medium': return 'Moderate changes detected. Monitor trends and consider key management policies.';
      case 'low': return 'Minimal changes detected. Your key management is stable.';
      default: return 'Unable to assess drift level.';
    }
  }
  
  String _getDashboardStyles() {
    return '''
    <style>
      :root {
        --primary-color: #3b82f6;
        --success-color: #22c55e;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --info-color: #06b6d4;
        --secondary-color: #64748b;
        --background-color: #f8fafc;
        --surface-color: #ffffff;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --border-color: #e2e8f0;
        --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
      }
      
      [data-theme="dark"] {
        --background-color: #0f172a;
        --surface-color: #1e293b;
        --text-primary: #f1f5f9;
        --text-secondary: #94a3b8;
        --border-color: #334155;
      }
      
      * { margin: 0; padding: 0; box-sizing: border-box; }
      
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        line-height: 1.6;
        color: var(--text-primary);
        background: var(--background-color);
        transition: background-color 0.3s ease, color 0.3s ease;
      }
      
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
      }
      
      /* Navigation */
      .dashboard-nav {
        background: var(--surface-color);
        border-bottom: 1px solid var(--border-color);
        position: sticky;
        top: 0;
        z-index: 100;
        backdrop-filter: blur(10px);
      }
      
      .nav-links {
        list-style: none;
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        padding: 1rem 0;
      }
      
      .nav-link {
        color: var(--text-secondary);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
        position: relative;
      }
      
      .nav-link:hover, .nav-link.active {
        color: var(--primary-color);
      }
      
      .nav-link.active::after {
        content: '';
        position: absolute;
        bottom: -1rem;
        left: 0;
        right: 0;
        height: 2px;
        background: var(--primary-color);
      }
      
      /* Header */
      .dashboard-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%);
        color: white;
        padding: 3rem 0;
        position: relative;
        overflow: hidden;
      }
      
      .dashboard-header.passed {
        background: linear-gradient(135deg, var(--success-color) 0%, #16a34a 100%);
      }
      
      .dashboard-header.failed {
        background: linear-gradient(135deg, var(--danger-color) 0%, #dc2626 100%);
      }
      
      .dashboard-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="white" opacity="0.1"/><circle cx="80" cy="80" r="2" fill="white" opacity="0.1"/><circle cx="40" cy="60" r="1" fill="white" opacity="0.1"/></svg>');
        pointer-events: none;
      }
      
      .dashboard-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        position: relative;
      }
      
      .timestamp {
        opacity: 0.9;
        font-size: 1rem;
        margin-bottom: 2rem;
        position: relative;
      }
      
      .export-controls {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        position: relative;
      }
      
      .status-badge {
        display: inline-block;
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        font-weight: 600;
        font-size: 1.25rem;
        margin: 1rem 0;
      }
      
      .status-badge.passed {
        background: rgba(255, 255, 255, 0.2);
        color: white;
      }
      
      .status-badge.failed {
        background: rgba(255, 255, 255, 0.2);
        color: white;
      }
      
      /* Buttons */
      .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 0.5rem;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.875rem;
      }
      
      .btn-primary {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        backdrop-filter: blur(10px);
      }
      
      .btn-primary:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-1px);
      }
      
      .btn-secondary {
        background: var(--secondary-color);
        color: white;
      }
      
      .btn-secondary:hover {
        background: #475569;
        transform: translateY(-1px);
      }
      
      .btn-outline {
        background: transparent;
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
      }
      
      .btn-outline:hover {
        background: rgba(255, 255, 255, 0.1);
      }
      
      .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.75rem;
      }
      
      /* Main Content */
      .dashboard-main {
        padding: 2rem 0;
      }
      
      .dashboard-section {
        background: var(--surface-color);
        margin-bottom: 2rem;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
      }
      
      .dashboard-section h2 {
        color: var(--text-primary);
        margin-bottom: 1.5rem;
        font-size: 1.5rem;
        font-weight: 600;
        border-bottom: 2px solid var(--border-color);
        padding-bottom: 0.75rem;
      }
      
      /* Overview Grid */
      .overview-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
      }
      
      .overview-card {
        background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%);
        color: white;
        padding: 2rem;
        border-radius: 1rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        position: relative;
        overflow: hidden;
      }
      
      .overview-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-lg);
      }
      
      .overview-card.success {
        background: linear-gradient(135deg, var(--success-color) 0%, #16a34a 100%);
      }
      
      .overview-card.warning {
        background: linear-gradient(135deg, var(--warning-color) 0%, #d97706 100%);
      }
      
      .overview-card.info {
        background: linear-gradient(135deg, var(--info-color) 0%, #0891b2 100%);
      }
      
      .overview-card::before {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="85" cy="15" r="10" fill="white" opacity="0.1"/></svg>');
        pointer-events: none;
      }
      
      .card-icon {
        font-size: 2.5rem;
        opacity: 0.9;
        position: relative;
      }
      
      .card-content {
        flex: 1;
        position: relative;
      }
      
      .card-value {
        font-size: 2.25rem;
        font-weight: 700;
        line-height: 1;
        margin-bottom: 0.25rem;
      }
      
      .card-label {
        font-size: 0.875rem;
        opacity: 0.9;
        font-weight: 500;
      }
      
      /* Key Distribution */
      .key-distribution {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .key-distribution h3 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      .distribution-chart {
        margin-bottom: 1rem;
        text-align: center;
      }
      
      .distribution-legend {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
      }
      
      .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
      }
      
      .legend-color {
        width: 1rem;
        height: 1rem;
        border-radius: 0.25rem;
      }
      
      /* Metrics Container */
      .metrics-container {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
      }
      
      .metric-charts {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
      }
      
      .chart-container {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        text-align: center;
      }
      
      .chart-container h3 {
        margin-bottom: 1rem;
        color: var(--text-primary);
        font-size: 1.125rem;
      }
      
      .metrics-details {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
      }
      
      .metric-group {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .metric-group h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
        font-size: 1rem;
      }
      
      .metric-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }
      
      .metric-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--border-color);
      }
      
      .metric-item:last-child {
        border-bottom: none;
      }
      
      .metric-name {
        color: var(--text-secondary);
        font-size: 0.875rem;
      }
      
      .metric-value {
        font-weight: 600;
        color: var(--text-primary);
      }
      
      /* Coverage Analysis */
      .coverage-analysis {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      
      .coverage-overview {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
      }
      
      .coverage-item {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .coverage-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }
      
      .coverage-name {
        font-weight: 600;
        color: var(--text-primary);
      }
      
      .coverage-value {
        font-weight: 700;
        font-size: 1.25rem;
        color: var(--primary-color);
      }
      
      .coverage-bar {
        position: relative;
        height: 0.75rem;
        background: var(--border-color);
        border-radius: 0.375rem;
        overflow: hidden;
        margin-bottom: 0.75rem;
      }
      
      .coverage-progress {
        height: 100%;
        border-radius: 0.375rem;
        transition: width 0.5s ease;
      }
      
      .coverage-target {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 2px;
        background: var(--text-primary);
        opacity: 0.5;
      }
      
      .coverage-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
      }
      
      .coverage-status.excellent {
        color: var(--success-color);
      }
      
      .coverage-status.good {
        color: var(--warning-color);
      }
      
      .coverage-status.needs-improvement {
        color: var(--danger-color);
      }
      
      .coverage-details {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .coverage-details h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      /* Performance Dashboard */
      .performance-dashboard {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      
      .performance-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
      }
      
      .perf-card {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.2s ease;
      }
      
      .perf-card:hover {
        transform: translateY(-2px);
      }
      
      .perf-icon {
        font-size: 2rem;
        opacity: 0.8;
      }
      
      .perf-content {
        flex: 1;
      }
      
      .perf-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-primary);
        line-height: 1;
        margin-bottom: 0.25rem;
      }
      
      .perf-label {
        font-size: 0.875rem;
        color: var(--text-secondary);
      }
      
      .performance-chart {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .performance-chart h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      /* Patterns Analysis */
      .patterns-analysis {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      
      .patterns-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 2rem;
      }
      
      .pattern-section {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .pattern-section h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      .pattern-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }
      
      .pattern-item {
        display: grid;
        grid-template-columns: 1fr auto auto;
        gap: 1rem;
        align-items: center;
        padding: 0.75rem;
        background: var(--background-color);
        border-radius: 0.5rem;
        transition: background-color 0.2s ease;
      }
      
      .pattern-item:hover {
        background: var(--border-color);
      }
      
      .pattern-name {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        color: var(--text-primary);
      }
      
      .pattern-icon {
        font-size: 1.125rem;
      }
      
      .pattern-count {
        font-weight: 600;
        color: var(--primary-color);
      }
      
      .pattern-percentage {
        font-size: 0.875rem;
        color: var(--text-secondary);
      }
      
      .patterns-visualization {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .patterns-visualization h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      /* File Analysis */
      .file-analysis {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
      }
      
      .file-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
      }
      
      .search-box {
        flex: 1;
        min-width: 250px;
      }
      
      .search-box input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        background: var(--surface-color);
        color: var(--text-primary);
        font-size: 0.875rem;
      }
      
      .search-box input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }
      
      .filter-controls {
        display: flex;
        gap: 1rem;
      }
      
      .filter-controls select {
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        background: var(--surface-color);
        color: var(--text-primary);
        font-size: 0.875rem;
        cursor: pointer;
      }
      
      .files-table-container {
        background: var(--surface-color);
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        overflow: hidden;
      }
      
      .files-table {
        width: 100%;
        border-collapse: collapse;
      }
      
      .files-table th {
        background: var(--background-color);
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        color: var(--text-primary);
        border-bottom: 1px solid var(--border-color);
      }
      
      .files-table td {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-primary);
      }
      
      .file-row:hover {
        background: var(--background-color);
      }
      
      .file-name {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .file-icon {
        font-size: 1.125rem;
      }
      
      .file-path {
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.875rem;
      }
      
      .count-badge {
        display: inline-block;
        background: var(--primary-color);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
      }
      
      .mini-progress {
        width: 60px;
        height: 6px;
        background: var(--border-color);
        border-radius: 3px;
        overflow: hidden;
        display: inline-block;
        vertical-align: middle;
        margin-right: 0.5rem;
      }
      
      .mini-progress-bar {
        height: 100%;
        background: var(--success-color);
        transition: width 0.3s ease;
      }
      
      .coverage-text {
        font-size: 0.875rem;
        color: var(--text-secondary);
      }
      
      .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
      }
      
      .status-badge.good {
        background: rgba(34, 197, 94, 0.1);
        color: var(--success-color);
      }
      
      .status-badge.fair {
        background: rgba(245, 158, 11, 0.1);
        color: var(--warning-color);
      }
      
      .status-badge.needs-review {
        background: rgba(239, 68, 68, 0.1);
        color: var(--danger-color);
      }
      
      .status-badge.no-keys {
        background: rgba(100, 116, 139, 0.1);
        color: var(--secondary-color);
      }
      
      /* Modal */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
      }
      
      .modal-content {
        background-color: var(--surface-color);
        margin: 5% auto;
        padding: 2rem;
        border-radius: 1rem;
        width: 90%;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
        box-shadow: var(--shadow-lg);
      }
      
      .modal-close {
        color: var(--text-secondary);
        float: right;
        font-size: 1.5rem;
        font-weight: bold;
        cursor: pointer;
        position: absolute;
        top: 1rem;
        right: 1rem;
      }
      
      .modal-close:hover {
        color: var(--text-primary);
      }
      
      /* Trends Analysis */
      .trends-analysis {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      
      .trends-message {
        background: var(--surface-color);
        padding: 2rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        display: flex;
        gap: 1.5rem;
        align-items: flex-start;
      }
      
      .message-icon {
        font-size: 3rem;
        opacity: 0.6;
      }
      
      .message-content h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      .message-content p {
        color: var(--text-secondary);
        margin-bottom: 1.5rem;
      }
      
      .trend-placeholder h5 {
        margin-bottom: 0.75rem;
        color: var(--text-primary);
      }
      
      .trend-placeholder ul {
        color: var(--text-secondary);
        padding-left: 1.5rem;
      }
      
      .trend-placeholder li {
        margin-bottom: 0.5rem;
      }
      
      .baseline-info {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .baseline-info h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      .baseline-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
      }
      
      .baseline-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: var(--background-color);
        border-radius: 0.5rem;
      }
      
      .baseline-label {
        color: var(--text-secondary);
        font-size: 0.875rem;
      }
      
      .baseline-value {
        font-weight: 600;
        color: var(--text-primary);
      }
      
      /* Issues Analysis */
      .issues-analysis {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      
      .issue-group {
        background: var(--surface-color);
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        overflow: hidden;
      }
      
      .issue-group.error {
        border-left: 4px solid var(--danger-color);
      }
      
      .issue-group.warning {
        border-left: 4px solid var(--warning-color);
      }
      
      .issue-group.info {
        border-left: 4px solid var(--info-color);
      }
      
      .issue-header {
        background: var(--background-color);
        padding: 1rem 1.5rem;
        margin: 0;
        color: var(--text-primary);
        font-size: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .issue-list {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      
      .issue-item {
        background: var(--background-color);
        padding: 1rem;
        border-radius: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1rem;
      }
      
      .issue-content {
        flex: 1;
      }
      
      .issue-title {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
      }
      
      .issue-message {
        color: var(--text-secondary);
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
      }
      
      .issue-location {
        color: var(--text-secondary);
        font-size: 0.75rem;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      }
      
      .recommendations {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .recommendations h4 {
        margin-bottom: 1rem;
        color: var(--text-primary);
      }
      
      .recommendation-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      
      .recommendation-item {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        background: var(--background-color);
        border-radius: 0.5rem;
      }
      
      .recommendation-icon {
        font-size: 1.5rem;
        opacity: 0.8;
      }
      
      .recommendation-content {
        flex: 1;
      }
      
      .recommendation-title {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.25rem;
      }
      
      .recommendation-description {
        color: var(--text-secondary);
        font-size: 0.875rem;
      }
      
      /* Validation Specific */
      .validation-summary {
        margin-bottom: 2rem;
      }
      
      .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
      }
      
      .summary-card {
        background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 0.75rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.2s ease;
      }
      
      .summary-card:hover {
        transform: translateY(-2px);
      }
      
      .summary-card.success {
        background: linear-gradient(135deg, var(--success-color) 0%, #16a34a 100%);
      }
      
      .summary-card.danger {
        background: linear-gradient(135deg, var(--danger-color) 0%, #dc2626 100%);
      }
      
      .summary-card.warning {
        background: linear-gradient(135deg, var(--warning-color) 0%, #d97706 100%);
      }
      
      .summary-card.info {
        background: linear-gradient(135deg, var(--info-color) 0%, #0891b2 100%);
      }
      
      .summary-card.secondary {
        background: linear-gradient(135deg, var(--secondary-color) 0%, #475569 100%);
      }
      
      .violations-analysis {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 2rem;
      }
      
      .violations-summary {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        text-align: center;
      }
      
      .violations-details {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      
      .violation-item {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .violation-item.error {
        border-left: 4px solid var(--danger-color);
      }
      
      .violation-item.warning {
        border-left: 4px solid var(--warning-color);
      }
      
      .violation-item.info {
        border-left: 4px solid var(--info-color);
      }
      
      .violation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
      }
      
      .violation-type {
        font-weight: 600;
        color: var(--text-primary);
      }
      
      .violation-severity {
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
      }
      
      .violation-severity.error {
        background: rgba(239, 68, 68, 0.1);
        color: var(--danger-color);
      }
      
      .violation-severity.warning {
        background: rgba(245, 158, 11, 0.1);
        color: var(--warning-color);
      }
      
      .violation-severity.info {
        background: rgba(6, 182, 212, 0.1);
        color: var(--info-color);
      }
      
      .violation-message {
        color: var(--text-secondary);
        margin-bottom: 0.75rem;
        font-size: 0.875rem;
      }
      
      .violation-remediation {
        color: var(--text-primary);
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
      }
      
      .violation-key {
        color: var(--text-secondary);
        font-size: 0.75rem;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        background: var(--background-color);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        display: inline-block;
      }
      
      .drift-analysis {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 2rem;
      }
      
      .drift-gauge {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        text-align: center;
      }
      
      .gauge-container {
        position: relative;
      }
      
      .gauge-value {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
      }
      
      .drift-percentage {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary);
        line-height: 1;
      }
      
      .drift-label {
        display: block;
        font-size: 0.875rem;
        color: var(--text-secondary);
      }
      
      .drift-details {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      
      .drift-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: var(--background-color);
        border-radius: 0.5rem;
      }
      
      .drift-metric {
        color: var(--text-secondary);
        font-size: 0.875rem;
      }
      
      .drift-value {
        font-weight: 600;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.875rem;
      }
      
      .drift-value.lost {
        background: rgba(239, 68, 68, 0.1);
        color: var(--danger-color);
      }
      
      .drift-value.added {
        background: rgba(34, 197, 94, 0.1);
        color: var(--success-color);
      }
      
      .drift-value.renamed {
        background: rgba(59, 130, 246, 0.1);
        color: var(--primary-color);
      }
      
      .drift-value.deprecated {
        background: rgba(245, 158, 11, 0.1);
        color: var(--warning-color);
      }
      
      .drift-assessment {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 0.75rem;
        border: 1px solid var(--border-color);
      }
      
      .drift-assessment.high {
        border-left: 4px solid var(--danger-color);
      }
      
      .drift-assessment.medium {
        border-left: 4px solid var(--warning-color);
      }
      
      .drift-assessment.low {
        border-left: 4px solid var(--success-color);
      }
      
      .drift-assessment h4 {
        margin-bottom: 0.75rem;
        color: var(--text-primary);
      }
      
      .drift-assessment p {
        color: var(--text-secondary);
        font-size: 0.875rem;
        line-height: 1.6;
      }
      
      /* Footer */
      .dashboard-footer {
        background: var(--surface-color);
        border-top: 1px solid var(--border-color);
        padding: 2rem 0;
        margin-top: 3rem;
        text-align: center;
        color: var(--text-secondary);
        font-size: 0.875rem;
      }
      
      /* Responsive Design */
      @media (max-width: 768px) {
        .container {
          padding: 0 1rem;
        }
        
        .dashboard-header h1 {
          font-size: 2rem;
        }
        
        .nav-links {
          flex-direction: column;
          gap: 1rem;
        }
        
        .overview-grid {
          grid-template-columns: 1fr;
        }
        
        .metrics-container {
          grid-template-columns: 1fr;
        }
        
        .metric-charts {
          grid-template-columns: 1fr;
        }
        
        .patterns-grid {
          grid-template-columns: 1fr;
        }
        
        .performance-cards {
          grid-template-columns: repeat(2, 1fr);
        }
        
        .summary-cards {
          grid-template-columns: repeat(2, 1fr);
        }
        
        .violations-analysis {
          grid-template-columns: 1fr;
        }
        
        .drift-analysis {
          grid-template-columns: 1fr;
        }
        
        .file-controls {
          flex-direction: column;
          align-items: stretch;
        }
        
        .search-box {
          min-width: auto;
        }
        
        .filter-controls {
          justify-content: stretch;
        }
        
        .filter-controls select {
          flex: 1;
        }
        
        .export-controls {
          justify-content: center;
        }
      }
      
      @media (max-width: 480px) {
        .dashboard-section {
          padding: 1rem;
        }
        
        .overview-card {
          padding: 1.5rem;
        }
        
        .card-value {
          font-size: 1.75rem;
        }
        
        .performance-cards {
          grid-template-columns: 1fr;
        }
        
        .summary-cards {
          grid-template-columns: 1fr;
        }
        
        .modal-content {
          margin: 2% auto;
          width: 95%;
          padding: 1rem;
        }
        
        .files-table {
          font-size: 0.875rem;
        }
        
        .files-table th,
        .files-table td {
          padding: 0.75rem 0.5rem;
        }
      }
      
      /* Print Styles */
      @media print {
        .dashboard-nav,
        .export-controls,
        .btn,
        .modal {
          display: none !important;
        }
        
        .dashboard-header {
          background: #3b82f6 !important;
          color: white !important;
        }
        
        .dashboard-section {
          break-inside: avoid;
          box-shadow: none;
          border: 1px solid #e2e8f0;
        }
        
        body {
          background: white !important;
          color: black !important;
        }
      }
      
      /* Animation Classes */
      .fade-in {
        animation: fadeIn 0.5s ease-in-out;
      }
      
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .slide-in {
        animation: slideIn 0.3s ease-out;
      }
      
      @keyframes slideIn {
        from { transform: translateX(-100%); }
        to { transform: translateX(0); }
      }
      
      /* Loading States */
      .loading {
        position: relative;
        overflow: hidden;
      }
      
      .loading::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.4),
          transparent
        );
        animation: loading 1.5s infinite;
      }
      
      @keyframes loading {
        0% { left: -100%; }
        100% { left: 100%; }
      }
      
      /* Dark theme specific adjustments */
      [data-theme="dark"] .overview-card,
      [data-theme="dark"] .summary-card {
        background: linear-gradient(135deg, #334155 0%, #1e293b 100%);
      }
      
      [data-theme="dark"] .chart-container,
      [data-theme="dark"] .metric-group,
      [data-theme="dark"] .pattern-section,
      [data-theme="dark"] .perf-card,
      [data-theme="dark"] .coverage-item,
      [data-theme="dark"] .performance-chart,
      [data-theme="dark"] .patterns-visualization,
      [data-theme="dark"] .baseline-info,
      [data-theme="dark"] .recommendations,
      [data-theme="dark"] .issue-group,
      [data-theme="dark"] .drift-gauge,
      [data-theme="dark"] .drift-details,
      [data-theme="dark"] .drift-assessment,
      [data-theme="dark"] .violations-summary,
      [data-theme="dark"] .violation-item {
        background: var(--surface-color);
        border-color: var(--border-color);
      }
    </style>
    ''';
  }
  
  String _getDashboardScripts(ScanResult result) {
    final keysByType = _getKeysByType(result);
    final keysBySource = _groupKeysBySource(result.keyUsages);
    
    return '''
    <script>
      // Chart.js CDN would typically be loaded here, but for self-contained HTML we'll use a lightweight charting solution
      
      // Global dashboard data
      const dashboardData = {
        keysByType: ${_jsonEncode(keysByType)},
        keysBySource: ${_jsonEncode(keysBySource.map((k, v) => MapEntry(k, v.length)))},
        metrics: {
          fileCoverage: ${result.metrics.fileCoverage},
          widgetCoverage: ${result.metrics.widgetCoverage},
          handlerCoverage: ${result.metrics.handlerCoverage},
          cacheHitRate: ${_getCacheHitRateNumber(result.metrics)},
          totalFiles: ${result.metrics.scannedFiles},
          totalKeys: ${result.keyUsages.length},
          duration: ${result.duration.inMilliseconds}
        }
      };
      
      // Theme Management
      function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('dashboard-theme', newTheme);
      }
      
      // Load saved theme
      function loadTheme() {
        const savedTheme = localStorage.getItem('dashboard-theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
      }
      
      // Export Functions
      function exportToPDF() {
        // Remove interactive elements and prepare for printing
        const exportButton = document.querySelector('.export-controls');
        if (exportButton) exportButton.style.display = 'none';
        
        // Print the page
        window.print();
        
        // Restore interactive elements
        setTimeout(() => {
          if (exportButton) exportButton.style.display = 'flex';
        }, 1000);
      }
      
      function exportToCSV() {
        const csvData = [];
        
        // Add headers
        csvData.push(['Metric', 'Value', 'Type']);
        
        // Add metrics data
        csvData.push(['Total Keys', dashboardData.metrics.totalKeys, 'Count']);
        csvData.push(['Total Files', dashboardData.metrics.totalFiles, 'Count']);
        csvData.push(['File Coverage', dashboardData.metrics.fileCoverage + '%', 'Percentage']);
        csvData.push(['Widget Coverage', dashboardData.metrics.widgetCoverage + '%', 'Percentage']);
        csvData.push(['Handler Coverage', dashboardData.metrics.handlerCoverage + '%', 'Percentage']);
        csvData.push(['Cache Hit Rate', dashboardData.metrics.cacheHitRate + '%', 'Percentage']);
        csvData.push(['Scan Duration', dashboardData.metrics.duration + 'ms', 'Time']);
        
        // Add key type distribution
        csvData.push([]);
        csvData.push(['Key Type Distribution']);
        csvData.push(['Type', 'Count', 'Percentage']);
        
        Object.entries(dashboardData.keysByType).forEach(([type, count]) => {
          const percentage = (count / dashboardData.metrics.totalKeys * 100).toFixed(1);
          csvData.push([type, count, percentage + '%']);
        });
        
        // Convert to CSV string
        const csvString = csvData.map(row => 
          row.map(cell => '"' + String(cell).replace(/"/g, '""') + '"').join(',')
        ).join('\\n');
        
        // Download CSV
        const blob = new Blob([csvString], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'flutter_keycheck_report_' + new Date().toISOString().split('T')[0] + '.csv';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
      
      // File filtering and sorting
      function filterFiles() {
        const searchTerm = document.getElementById('fileSearch').value.toLowerCase();
        const filterBy = document.getElementById('filterBy').value;
        const rows = document.querySelectorAll('.file-row');
        
        rows.forEach(row => {
          const fileName = row.getAttribute('data-name').toLowerCase();
          const keyCount = parseInt(row.getAttribute('data-keys'));
          
          let showRow = true;
          
          // Apply search filter
          if (searchTerm && !fileName.includes(searchTerm)) {
            showRow = false;
          }
          
          // Apply category filter
          if (filterBy !== 'all') {
            switch (filterBy) {
              case 'high':
                if (keyCount <= 10) showRow = false;
                break;
              case 'medium':
                if (keyCount < 5 || keyCount > 10) showRow = false;
                break;
              case 'low':
                if (keyCount >= 5) showRow = false;
                break;
            }
          }
          
          row.style.display = showRow ? '' : 'none';
        });
      }
      
      function sortFiles() {
        const sortBy = document.getElementById('sortBy').value;
        const tbody = document.querySelector('.files-table tbody');
        const rows = Array.from(tbody.querySelectorAll('.file-row'));
        
        rows.sort((a, b) => {
          switch (sortBy) {
            case 'keys':
              return parseInt(b.getAttribute('data-keys')) - parseInt(a.getAttribute('data-keys'));
            case 'name':
              return a.getAttribute('data-name').localeCompare(b.getAttribute('data-name'));
            case 'size':
              // Would need file size data - for now sort by keys
              return parseInt(b.getAttribute('data-keys')) - parseInt(a.getAttribute('data-keys'));
            default:
              return 0;
          }
        });
        
        rows.forEach(row => tbody.appendChild(row));
      }
      
      function showFileDetails(filePath) {
        const modal = document.getElementById('fileDetailModal');
        const content = document.getElementById('fileDetailContent');
        
        // Find file data
        const fileRow = document.querySelector(`[data-name="\${filePath}"]`);
        if (!fileRow) return;
        
        // Build detail content
        const keyCount = fileRow.getAttribute('data-keys');
        content.innerHTML = `
          <h3>📁 File Details</h3>
          <div style="margin: 1.5rem 0;">
            <strong>Path:</strong> <code>\${filePath}</code><br>
            <strong>Keys Found:</strong> \${keyCount}<br>
            <strong>Status:</strong> <span class="status-badge">Good</span>
          </div>
          <div style="margin: 1.5rem 0;">
            <h4>Recommendations:</h4>
            <ul style="margin-left: 1.5rem; color: var(--text-secondary);">
              <li>Regular scan monitoring recommended</li>
              <li>Consider adding more key identifiers for better coverage</li>
              <li>Review widget key patterns for consistency</li>
            </ul>
          </div>
        `;
        
        modal.style.display = 'block';
      }
      
      function closeFileDetails() {
        document.getElementById('fileDetailModal').style.display = 'none';
      }
      
      // Navigation smooth scrolling
      function initNavigation() {
        const navLinks = document.querySelectorAll('.nav-link');
        
        navLinks.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
              targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
              
              // Update active nav link
              navLinks.forEach(l => l.classList.remove('active'));
              link.classList.add('active');
            }
          });
        });
      }
      
      // Simple chart rendering (fallback when Chart.js not available)
      function renderSimpleChart(canvasId, data, type = 'doughnut') {
        const canvas = document.getElementById(canvasId);
        if (!canvas) return;
        
        const ctx = canvas.getContext('2d');
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = Math.min(centerX, centerY) - 20;
        
        if (type === 'doughnut') {
          // Clear canvas
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          
          const total = Object.values(data).reduce((sum, val) => sum + val, 0);
          let currentAngle = -Math.PI / 2;
          
          const colors = ['#3b82f6', '#22c55e', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#64748b'];
          let colorIndex = 0;
          
          Object.entries(data).forEach(([key, value]) => {
            const sliceAngle = (value / total) * 2 * Math.PI;
            
            // Draw slice
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
            ctx.arc(centerX, centerY, radius * 0.6, currentAngle + sliceAngle, currentAngle, true);
            ctx.closePath();
            ctx.fillStyle = colors[colorIndex % colors.length];
            ctx.fill();
            
            currentAngle += sliceAngle;
            colorIndex++;
          });
          
          // Draw center text
          ctx.fillStyle = '#1e293b';
          ctx.font = 'bold 16px Arial';
          ctx.textAlign = 'center';
          ctx.fillText(total, centerX, centerY - 5);
          ctx.font = '12px Arial';
          ctx.fillText('Total', centerX, centerY + 10);
        }
      }
      
      // Initialize charts
      function initCharts() {
        // Render key type distribution chart
        renderSimpleChart('keyTypeChart', dashboardData.keysByType);
        
        // Render coverage chart
        const coverageData = {
          'File Coverage': dashboardData.metrics.fileCoverage,
          'Widget Coverage': dashboardData.metrics.widgetCoverage,
          'Handler Coverage': dashboardData.metrics.handlerCoverage
        };
        renderSimpleChart('coverageChart', coverageData);
        
        // Render sources chart
        const topSources = Object.entries(dashboardData.keysBySource)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 5)
          .reduce((obj, [key, val]) => ({ ...obj, [key]: val }), {});
        renderSimpleChart('sourcesChart', topSources);
      }
      
      // Initialize dashboard
      function initDashboard() {
        loadTheme();
        initNavigation();
        initCharts();
        
        // Add fade-in animations
        const sections = document.querySelectorAll('.dashboard-section');
        sections.forEach((section, index) => {
          setTimeout(() => {
            section.classList.add('fade-in');
          }, index * 100);
        });
      }
      
      // Close modal when clicking outside
      window.onclick = function(event) {
        const modal = document.getElementById('fileDetailModal');
        if (event.target === modal) {
          closeFileDetails();
        }
      }
      
      // Initialize when DOM is loaded
      document.addEventListener('DOMContentLoaded', initDashboard);
      
      // Handle keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeFileDetails();
        }
        if (e.ctrlKey || e.metaKey) {
          switch (e.key) {
            case 'p':
              e.preventDefault();
              exportToPDF();
              break;
            case 'e':
              e.preventDefault();
              exportToCSV();
              break;
            case 'd':
              e.preventDefault();
              toggleTheme();
              break;
          }
        }
      });
      
      // Auto-refresh detection (if baseline changes)
      let lastCheck = Date.now();
      function checkForUpdates() {
        // This would typically check for new baseline data
        // For now, just show a message if the page has been open for a while
        if (Date.now() - lastCheck > 300000) { // 5 minutes
          const notice = document.createElement('div');
          notice.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--warning-color);
            color: white;
            padding: 1rem;
            border-radius: 0.5rem;
            z-index: 1000;
            box-shadow: var(--shadow-lg);
          `;
          notice.innerHTML = '📊 Consider refreshing for latest data';
          document.body.appendChild(notice);
          
          setTimeout(() => {
            document.body.removeChild(notice);
          }, 5000);
          
          lastCheck = Date.now();
        }
      }
      
      // Check for updates every minute
      setInterval(checkForUpdates, 60000);
    </script>
    ''';
  }
  
  String _getValidationScripts(ValidationResult result) {
    return '''
    <script>
      // Validation-specific dashboard data
      const validationData = {
        summary: {
          totalKeys: ${result.summary.totalKeys},
          lostKeys: ${result.summary.lostKeys},
          addedKeys: ${result.summary.addedKeys},
          renamedKeys: ${result.summary.renamedKeys},
          deprecatedInUse: ${result.summary.deprecatedInUse},
          driftPercentage: ${result.driftPercentage}
        },
        violations: ${result.violations.length},
        passed: ${!result.hasViolations}
      };
      
      // Theme Management
      function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('dashboard-theme', newTheme);
      }
      
      function loadTheme() {
        const savedTheme = localStorage.getItem('dashboard-theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
      }
      
      // Export Functions
      function exportToPDF() {
        const exportButton = document.querySelector('.export-controls');
        if (exportButton) exportButton.style.display = 'none';
        window.print();
        setTimeout(() => {
          if (exportButton) exportButton.style.display = 'flex';
        }, 1000);
      }
      
      function exportToCSV() {
        const csvData = [];
        csvData.push(['Validation Report']);
        csvData.push(['Metric', 'Value']);
        csvData.push(['Status', validationData.passed ? 'PASSED' : 'FAILED']);
        csvData.push(['Total Keys', validationData.summary.totalKeys]);
        csvData.push(['Lost Keys', validationData.summary.lostKeys]);
        csvData.push(['Added Keys', validationData.summary.addedKeys]);
        csvData.push(['Renamed Keys', validationData.summary.renamedKeys]);
        csvData.push(['Deprecated in Use', validationData.summary.deprecatedInUse]);
        csvData.push(['Drift Percentage', validationData.summary.driftPercentage + '%']);
        csvData.push(['Total Violations', validationData.violations]);
        
        const csvString = csvData.map(row => 
          row.map(cell => '"' + String(cell).replace(/"/g, '""') + '"').join(',')
        ).join('\\n');
        
        const blob = new Blob([csvString], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'flutter_keycheck_validation_' + new Date().toISOString().split('T')[0] + '.csv';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
      
      // Render drift gauge
      function renderDriftGauge() {
        const canvas = document.getElementById('driftGauge');
        if (!canvas) return;
        
        const ctx = canvas.getContext('2d');
        const centerX = canvas.width / 2;
        const centerY = canvas.height - 20;
        const radius = Math.min(centerX, centerY) - 20;
        
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Draw gauge background
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, Math.PI, 0);
        ctx.lineWidth = 20;
        ctx.strokeStyle = '#e2e8f0';
        ctx.stroke();
        
        // Calculate drift angle
        const driftAngle = Math.PI * (validationData.summary.driftPercentage / 100);
        
        // Draw drift arc
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, Math.PI, Math.PI + driftAngle);
        ctx.lineWidth = 20;
        
        // Color based on drift level
        if (validationData.summary.driftPercentage > 15) {
          ctx.strokeStyle = '#ef4444';
        } else if (validationData.summary.driftPercentage > 5) {
          ctx.strokeStyle = '#f59e0b';
        } else {
          ctx.strokeStyle = '#22c55e';
        }
        
        ctx.stroke();
      }
      
      // Render violations chart
      function renderViolationsChart() {
        const canvas = document.getElementById('violationsChart');
        if (!canvas) return;
        
        const ctx = canvas.getContext('2d');
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = Math.min(centerX, centerY) - 20;
        
        // Sample violation data (would be real in actual implementation)
        const violationData = {
          'Error': ${result.violations.where((v) => v.severity == 'error').length},
          'Warning': ${result.violations.where((v) => v.severity == 'warning').length},
          'Info': ${result.violations.where((v) => v.severity == 'info').length}
        };
        
        const total = Object.values(violationData).reduce((sum, val) => sum + val, 0);
        if (total === 0) return;
        
        let currentAngle = -Math.PI / 2;
        const colors = { 'Error': '#ef4444', 'Warning': '#f59e0b', 'Info': '#06b6d4' };
        
        Object.entries(violationData).forEach(([key, value]) => {
          if (value === 0) return;
          
          const sliceAngle = (value / total) * 2 * Math.PI;
          
          ctx.beginPath();
          ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
          ctx.arc(centerX, centerY, radius * 0.6, currentAngle + sliceAngle, currentAngle, true);
          ctx.closePath();
          ctx.fillStyle = colors[key];
          ctx.fill();
          
          currentAngle += sliceAngle;
        });
        
        // Center text
        ctx.fillStyle = '#1e293b';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(total, centerX, centerY - 5);
        ctx.font = '12px Arial';
        ctx.fillText('Violations', centerX, centerY + 10);
      }
      
      // Initialize validation dashboard
      function initValidationDashboard() {
        loadTheme();
        renderDriftGauge();
        renderViolationsChart();
        
        // Add animations
        const sections = document.querySelectorAll('.dashboard-section');
        sections.forEach((section, index) => {
          setTimeout(() => {
            section.classList.add('fade-in');
          }, index * 100);
        });
      }
      
      // Initialize when DOM is loaded
      document.addEventListener('DOMContentLoaded', initValidationDashboard);
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.metaKey) {
          switch (e.key) {
            case 'p':
              e.preventDefault();
              exportToPDF();
              break;
            case 'e':
              e.preventDefault();
              exportToCSV();
              break;
            case 'd':
              e.preventDefault();
              toggleTheme();
              break;
          }
        }
      });
    </script>
    ''';
  }
  
  // Utility methods for JavaScript generation
  String _jsonEncode(Map<String, dynamic> data) {
    return data.entries.map((e) => '"${e.key}": ${e.value}').join(', ');
  }
  
  double _getCacheHitRateNumber(ScanMetrics metrics) {
    final total = metrics.cacheHits + metrics.cacheMisses;
    if (total == 0) return 0.0;
    return (metrics.cacheHits / total * 100);
  }
}